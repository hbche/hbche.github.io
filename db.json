{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/copycode.scss","path":"css/copycode.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/copyright.scss","path":"css/copyright.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.scss","path":"css/donate.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/search.scss","path":"css/search.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copycode.js","path":"js/copycode.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copyright.js","path":"js/copyright.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/love.js","path":"js/love.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/recent-comments.js","path":"js/recent-comments.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"067c917be1ec6b655ce60d0f294a1427d708bf59","modified":1675138509115},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1675127491423},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1675127491423},{"_id":"source/_posts/test-hexo-page.md","hash":"d1bf487f0ee2108f703b31e94df0424e30c2b256","modified":1675129401182},{"_id":"source/test-page/index.md","hash":"d30d11d582f3c8a68729fabb9046dd59830a3f8d","modified":1675133286876},{"_id":"themes/cafe/layout/_scripts/index.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675135850619},{"_id":"themes/cafe/.bowerrc","hash":"09b4947b6c6f8e300f4927b96a487f16f02d702a","modified":1675135850588},{"_id":"themes/cafe/README.md","hash":"7a338b1c256c07955989882333d82dc5349680de","modified":1675135850589},{"_id":"themes/cafe/README_en.md","hash":"a346042e7d7d4205bae48e86c894969d08485be6","modified":1675135850589},{"_id":"themes/cafe/.gitignore","hash":"63963cef8fc919257215ff980c3c34b7b0951754","modified":1675135850589},{"_id":"themes/cafe/_config.yml","hash":"61141292ff97ceb34327ea3066b4247cd6526023","modified":1675135850590},{"_id":"themes/cafe/bower.json","hash":"06dc924ce808e3363bb31eddc023433ea588a30d","modified":1675135850610},{"_id":"themes/cafe/cafe-qrcode.png","hash":"4fef2c889376a208a49aa92c582b147e7e005d23","modified":1675135850610},{"_id":"themes/cafe/package.json","hash":"81290c217cc42ded73ddf637c865b664a4aed53c","modified":1675135850630},{"_id":"themes/cafe/webpack.config.js","hash":"ad9a245e554affab9d5fc46c753c1978bdd4e640","modified":1675135850662},{"_id":"themes/cafe/assets/duoshuo_comment.png","hash":"33402149f82b66ff4ed405f44beb06eb0172b6de","modified":1675135850591},{"_id":"themes/cafe/assets/share.png","hash":"823926d9cb8985ceb93a119ef138f9638a8ead1a","modified":1675135850610},{"_id":"themes/cafe/languages/default.yml","hash":"fa29b6eaff7c2adb38586748e35487294323ed7d","modified":1675135850611},{"_id":"themes/cafe/languages/nl.yml","hash":"eac2a6928ea9bf65c44a5cb7c620b1103f066558","modified":1675135850611},{"_id":"themes/cafe/languages/no.yml","hash":"b3d1684075aa7178f59cb1ac6e9cb5f7664b797b","modified":1675135850612},{"_id":"themes/cafe/languages/ru.yml","hash":"1db37462baa63725618bf45a1357b960df89c20d","modified":1675135850612},{"_id":"themes/cafe/languages/zh-CN.yml","hash":"00bd1677cd9ad8b3581ec54260ac7096c32049a3","modified":1675135850612},{"_id":"themes/cafe/languages/zh-TW.yml","hash":"de2bb429c3c75ce89321b233a04e0237466dbf49","modified":1675135850613},{"_id":"themes/cafe/layout/category.ejs","hash":"f46e99e5b68c2ee67bdab068b1da4029bc09847d","modified":1675135850626},{"_id":"themes/cafe/languages/en.yml","hash":"1fe9eaf256639fea43c30790129276a5d557db36","modified":1675135850611},{"_id":"themes/cafe/layout/archive.ejs","hash":"11912b8e50dafbe9b0a65df0beaeab64fde90abe","modified":1675135850626},{"_id":"themes/cafe/layout/layout.ejs","hash":"38f0162183c1714924063ecab4ba3d64d98090a9","modified":1675135850627},{"_id":"themes/cafe/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1675135850627},{"_id":"themes/cafe/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1675135850628},{"_id":"themes/cafe/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1675135850629},{"_id":"themes/cafe/layout/tag.ejs","hash":"4349f382b07603f9d2c03dd4df70ddea9b9a035c","modified":1675135850630},{"_id":"themes/cafe/source/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1675135850657},{"_id":"themes/cafe/scripts/extend.generator.js","hash":"adf14a21221a8b9667f6ea1d1f6ad6fb28eb5d74","modified":1675135850630},{"_id":"themes/cafe/scripts/fancybox.js","hash":"dd6c9e7cf9019a001eef26d58357e768584107cd","modified":1675135850631},{"_id":"themes/cafe/layout/_partial/after-footer.ejs","hash":"7cb13c479a5eff78d96a90ab2ca7dc4d31907ca8","modified":1675135850613},{"_id":"themes/cafe/layout/_partial/archive-post.ejs","hash":"d4c33584464f238acc5c3bdb4698d7399f9638a8","modified":1675135850613},{"_id":"themes/cafe/layout/_partial/article.ejs","hash":"0dca4c13e9702bef3a40abb4948fccc6812958d8","modified":1675135850614},{"_id":"themes/cafe/layout/_partial/archive.ejs","hash":"fbf0ab448b94fa2064ef809601d51eaa4f497236","modified":1675135850614},{"_id":"themes/cafe/layout/_partial/footer.ejs","hash":"a1627a239dc8c4c8864ad611d0b7d53dede33e1d","modified":1675135850615},{"_id":"themes/cafe/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1675135850615},{"_id":"themes/cafe/layout/_partial/header.ejs","hash":"28d3e43eb3fd6dcdc0d273aaa063bd200be58e4c","modified":1675135850616},{"_id":"themes/cafe/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1675135850616},{"_id":"themes/cafe/layout/_partial/comments.ejs","hash":"84b80c47ce52bdf103dda0f2559df4a6223b5183","modified":1675135850614},{"_id":"themes/cafe/layout/_partial/head.ejs","hash":"20b6b18d1e0d6ec14ba558208fe7f36ec2dff0e9","modified":1675135850615},{"_id":"themes/cafe/layout/_partial/random_posts.ejs","hash":"40e651a0b85eaafc6351bee2c776c9dc53562a77","modified":1675135850618},{"_id":"themes/cafe/layout/_partial/widget.ejs","hash":"da7939823193ada87f2f873c7ed3213430000645","modified":1675135850618},{"_id":"themes/cafe/layout/_partial/sidebar.ejs","hash":"7dad154b4d825845c739d0105b7e3773d0cf8822","modified":1675135850618},{"_id":"themes/cafe/layout/_third-part/index.ejs","hash":"a44b02c9fdeb63e130dc789a3fd7c9d4a413b370","modified":1675135850622},{"_id":"themes/cafe/layout/_widget/archive.ejs","hash":"16b4f2c9e92c61c9b0ba4355f331ef43a1da69f0","modified":1675135850623},{"_id":"themes/cafe/layout/_widget/category.ejs","hash":"d2a14d884080efddf2c4f3b0829d33b4fba46595","modified":1675135850623},{"_id":"themes/cafe/layout/_widget/friendly_link.ejs","hash":"bf3f3542894fc952819821233a071735c74012af","modified":1675135850623},{"_id":"themes/cafe/layout/_widget/hot_comment_posts.ejs","hash":"85e643a3b3df886f84488c6fac1a81bb8abf9091","modified":1675135850623},{"_id":"themes/cafe/layout/_widget/lastest_comments.ejs","hash":"170a773c94b99f653d3cb1fb968fb9715b78a88d","modified":1675135850624},{"_id":"themes/cafe/layout/_widget/post_content.ejs","hash":"94bfe5713747e2f91d036549460220aa7d3b6a5b","modified":1675135850624},{"_id":"themes/cafe/layout/_widget/recent_posts.ejs","hash":"35ad60dbcdf5ba099a6cd7d61b4addb64023ceeb","modified":1675135850624},{"_id":"themes/cafe/layout/_widget/social.ejs","hash":"23e3d73d52a1a9759b8c7800641e96022e2cb84f","modified":1675135850625},{"_id":"themes/cafe/layout/_widget/tag.ejs","hash":"51c3bcba8815677fc09919857205e48038fb0fef","modified":1675135850625},{"_id":"themes/cafe/layout/_widget/tagcloud.ejs","hash":"28b18597ff7132c0c2b22b89a1e1fd4f3c31292c","modified":1675135850625},{"_id":"themes/cafe/layout/_widget/wechat.ejs","hash":"200f8e54879b7116e45f82c9a8118ef7df2417e6","modified":1675135850626},{"_id":"themes/cafe/layout/partials/back2top.ejs","hash":"7962c3bd00150d577c0a16c695557aa3690e394e","modified":1675135850628},{"_id":"themes/cafe/layout/partials/hot-comment-posts.ejs","hash":"2829226af9640dbb98e49e4349460baf7ec1f77b","modified":1675135850628},{"_id":"themes/cafe/layout/partials/pagination.ejs","hash":"7c4780ee5b9dad0a46c5caf422965bdcb1dc3664","modified":1675135850629},{"_id":"themes/cafe/layout/partials/lastest-comments.ejs","hash":"a49dc7faa2316783b836a8b227ff677bf43f5c7d","modified":1675135850629},{"_id":"themes/cafe/layout/partials/recent-posts.ejs","hash":"72f76ca49eb9640054a32725ef462e8085e1ca43","modified":1675135850629},{"_id":"themes/cafe/source/_data/themes.yml","hash":"51a446e543e5ab821905351baa1edbfdc59826ab","modified":1675135850631},{"_id":"themes/cafe/source/css/_variables.styl","hash":"1f4d6146611009bd78e981b5be6fdf84197a35f8","modified":1675135850637},{"_id":"themes/cafe/source/css/style.styl","hash":"2ef9f14cb66a8be749ca1d95242396994b64e889","modified":1675135850649},{"_id":"themes/cafe/source/css/_extend.styl","hash":"cf7f7bf06ade097d841019e901c64ea5fcbf622f","modified":1675135850631},{"_id":"themes/cafe/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1675135850651},{"_id":"themes/cafe/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1675135850651},{"_id":"themes/cafe/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1675135850651},{"_id":"themes/cafe/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1675135850652},{"_id":"themes/cafe/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1675135850652},{"_id":"themes/cafe/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1675135850653},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1675135850655},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1675135850656},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1675135850656},{"_id":"themes/cafe/source/images/fly-to-top.png","hash":"f189038da3c68a8012e924185a1faee98bde3003","modified":1675135850657},{"_id":"themes/cafe/source/js/elevator.js","hash":"e97932b797d4315fe5586d7538db513f18169956","modified":1675135850660},{"_id":"themes/cafe/source/js/script.js","hash":"4f8175622792da79b3b1fded60f5e15aa0bb067b","modified":1675135850661},{"_id":"themes/cafe/source/js/is.js","hash":"7e5820c0d5c688eb257ca436f583cb1762f986d4","modified":1675135850661},{"_id":"themes/cafe/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1675135850616},{"_id":"themes/cafe/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1675135850617},{"_id":"themes/cafe/layout/_partial/post/duoshuo.ejs","hash":"467563b555d584b7b9de85a543445ff35c3157f9","modified":1675135850617},{"_id":"themes/cafe/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1675135850617},{"_id":"themes/cafe/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1675135850617},{"_id":"themes/cafe/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1675135850618},{"_id":"themes/cafe/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1675135850618},{"_id":"themes/cafe/layout/_third-part/comments/changyan.ejs","hash":"1c94583c27c972e9e5161a453d96c5bb377bf21e","modified":1675135850619},{"_id":"themes/cafe/layout/_third-part/comments/disqus.ejs","hash":"3bd41bc585b46d7e14f4abfe1fd130950e88e1e4","modified":1675135850620},{"_id":"themes/cafe/layout/_third-part/comments/duoshuo.ejs","hash":"50a681fe3a30e6c42b91fd9beea8ea23f8328cee","modified":1675135850620},{"_id":"themes/cafe/layout/_third-part/comments/gentie.ejs","hash":"eeaee1a1c958c6c4b1fb066b9e1b7cada9a9471d","modified":1675135850620},{"_id":"themes/cafe/layout/_third-part/comments/index.ejs","hash":"9a358fa1d7c965a054e2fb4fc0ed32d0472518bc","modified":1675135850621},{"_id":"themes/cafe/layout/_third-part/comments/gitment.ejs","hash":"25c71114ff0ede012d2dcb72cfb4e821f1744634","modified":1675135850620},{"_id":"themes/cafe/layout/_third-part/comments/youyan.ejs","hash":"40a49f44f934711d2f37e23827d60822305e1f2d","modified":1675135850622},{"_id":"themes/cafe/layout/_third-part/mathjax/index.ejs","hash":"c4c3995ef543c1295dc9a619582b98b2857d0ca1","modified":1675135850622},{"_id":"themes/cafe/source/css/_partial/archive.styl","hash":"77197dd5240eb0a4d77daf7bd977858ae83eda68","modified":1675135850632},{"_id":"themes/cafe/source/css/_partial/article.styl","hash":"37ce987f08ba6bc6af42d838536bc90f07ad48fa","modified":1675135850632},{"_id":"themes/cafe/source/css/_partial/comment.styl","hash":"d43ee49803bfe4d718fcf69921169b68f2cd994f","modified":1675135850632},{"_id":"themes/cafe/source/css/_partial/custom.styl","hash":"f162ddfa65c268d79425e8c143688481f559ad2c","modified":1675135850633},{"_id":"themes/cafe/source/css/_partial/duoshuo.styl","hash":"6c9ac4fae2a2d8afedd63f5a8c95b1942cbd59b0","modified":1675135850633},{"_id":"themes/cafe/source/css/_partial/footer.styl","hash":"27a0d5b8bd34319fdb4d066859753c9dac0bdf26","modified":1675135850633},{"_id":"themes/cafe/source/css/_partial/header.styl","hash":"ea3d77cfcc7244a737eea2bf1017e0c6abe69be3","modified":1675135850634},{"_id":"themes/cafe/source/css/_partial/highlight.styl","hash":"acaf6574b14afcac8e54b4f868f514e4339be509","modified":1675135850634},{"_id":"themes/cafe/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1675135850634},{"_id":"themes/cafe/source/css/_partial/other.styl","hash":"cc89dc51b9a6fb12a4d38b7c591e022ab767fcc1","modified":1675135850634},{"_id":"themes/cafe/source/css/_partial/random-post.styl","hash":"4fd4efb828bdcd01d3c3047ca2c5983eeabb9a43","modified":1675135850635},{"_id":"themes/cafe/source/css/_partial/sidebar-aside.styl","hash":"935e66df775d2f855f15587d9e3891f1ed54bc27","modified":1675135850635},{"_id":"themes/cafe/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1675135850635},{"_id":"themes/cafe/source/css/_partial/sidebar.styl","hash":"6180892f6fc4d152bbf74664bbdaa7c87cdc6ba2","modified":1675135850636},{"_id":"themes/cafe/source/css/_partial/social.styl","hash":"814e011e94b0f2e4f7583d58c6ca8a745009f2e4","modified":1675135850636},{"_id":"themes/cafe/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1675135850637},{"_id":"themes/cafe/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1675135850636},{"_id":"themes/cafe/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1675135850653},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1675135850653},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1675135850654},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1675135850654},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1675135850654},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1675135850655},{"_id":"themes/cafe/source/themes/screenshots/Cafe.png","hash":"6f639068117b8d44005730864cc0b05a11b28d73","modified":1675135850662},{"_id":"themes/cafe/source/duoshuo/embed.js","hash":"f63d86822d86d2154b065d12303c4a889c40664d","modified":1675135850650},{"_id":"themes/cafe/source/jquery/jquery.min.js","hash":"745ab5d6e434cf8d321779da3c527b6d301e2b50","modified":1675135850658},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1675135850646},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1675135850647},{"_id":"themes/cafe/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1675135850638},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1675135850640},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1675135850645},{"_id":"themes/cafe/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1675135850649},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1675135850643},{"_id":"themes/cafe/assets/pc-display.gif","hash":"fb84eb2ba958b1e02ad5e178a6f367a561cd9252","modified":1675135850609},{"_id":"themes/cafe/assets/mobie-display.gif","hash":"d20f7aa46d9bf618ba1ebaf9b6bda71b030f0ce9","modified":1675135850605},{"_id":"themes/maupassant/.gitignore","hash":"d7d27e5a9bcffe7f90dc2f4f0752e19020e40f40","modified":1675136410803},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1675136410804},{"_id":"themes/maupassant/_config.yml","hash":"895390aa21d0646b23b53602a63a397accae2021","modified":1687944856554},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1675136410805},{"_id":"themes/maupassant/README.md","hash":"c307cb96cd8331927cc1012fb0b3dfede2b113e8","modified":1687944856554},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1675136410830},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1675136410810},{"_id":"themes/maupassant/languages/en.yml","hash":"def65da84b131be40c090928ffd8186c71cf99a1","modified":1675136410812},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1675136410813},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1675136410813},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1675136410813},{"_id":"themes/maupassant/languages/nb-NO.yml","hash":"1812e3f7b22d3fe85238f3f61ab06efa755c7cc1","modified":1675136410814},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1675136410815},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"c2064b65b4326d1ac8924405bad7f037e4ea2cf4","modified":1675136410816},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"17eec161e4dad1569890ad4a6af17ea7b13ea588","modified":1675136410815},{"_id":"themes/maupassant/layout/archive.pug","hash":"8582db9eeebad1478db36f996292e2536b677694","modified":1675136410824},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"c03e722ee31cd464cf2e6e39467bcdf398f4151f","modified":1675136410825},{"_id":"themes/maupassant/layout/blogroll.pug","hash":"f440c812d4a05c541fc1db9de1b6c9ae23f065c7","modified":1675136410825},{"_id":"themes/maupassant/layout/page.pug","hash":"cb0aed2ea7892cdbc2f2ed7e3771e6a8229a31b8","modified":1675136410828},{"_id":"themes/maupassant/layout/index.pug","hash":"a9459d749cc2ac6ac22275689856a370d6d278c9","modified":1675136410828},{"_id":"themes/maupassant/layout/base.pug","hash":"de21fa6e7ac20ef86c6ee93fc776f9ad5b164f21","modified":1675136410825},{"_id":"themes/maupassant/layout/post.pug","hash":"89724d1a1fa71feb55b4e75de6b8f1404267b7e7","modified":1687944856574},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1675136410829},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"30e0191597d25ea88eb2f077f278caea61a47534","modified":1675136410829},{"_id":"themes/maupassant/layout/timeline.pug","hash":"b041b77a941b788fad78d522d013bc158efe168c","modified":1675136410829},{"_id":"themes/maupassant/layout/_widget/donate.pug","hash":"e29fa0b74b8b01f6fe5ee827ab6d7dd25bb0accb","modified":1675136410822},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"e6bfc74e613f515dea534c22e4a9e1213c4db772","modified":1675136410821},{"_id":"themes/maupassant/layout/_widget/copyright.pug","hash":"4ee90ed25c0fb10d57ce3c58f8e4f725702637ef","modified":1675136410821},{"_id":"themes/maupassant/layout/_widget/info.pug","hash":"55dd19e50bf78b90aa4013b38e676d1821cc7258","modified":1675136410822},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"5aa5864bc86bd8c43c11cbec025456f8f123997c","modified":1675136410822},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"2452cb2ffa159304a0d34c117250a4d12bd1b63f","modified":1675136410822},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"b717c372c8ff1285bcb87a4c28b318e9392bfbcc","modified":1675136410823},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"89ce6c4e34ab003662913aca3158a9e078feb6d5","modified":1675136410824},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"6d82d3c0def86d8f9445c9542f52033d2378956e","modified":1675136410824},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"089e21f159835c977a1891572f7b3f96cea5758c","modified":1675136410816},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"afc0e55b3195762b0926799ed24f8147fcbd66f6","modified":1687944856559},{"_id":"themes/maupassant/layout/_partial/darkmode.pug","hash":"8a4c53229394ba6cf63afd427b4e6b1dc1156526","modified":1675136410817},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"92aa15e813bfb411803cc54218feb5410469a9c2","modified":1675136410818},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1675136410818},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"08ee724c6258786088ae6a363d13fd8239b0bb77","modified":1675136410818},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1675136410819},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"de4515948d7cf10d3cca0e20e310c8b6cbb5d438","modified":1675136410819},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1675136410820},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1675136410820},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"c24f59230b18854daf847d39ce54c131b2f716c9","modified":1687944856565},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1675136410820},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"d7ebbdcee193e345e3f92539ddffd291a870b5f9","modified":1675136410821},{"_id":"themes/maupassant/source/css/copycode.scss","hash":"23fefb18f1d4dc7bde33e29d6ae737570277d943","modified":1675136410830},{"_id":"themes/maupassant/source/css/copyright.scss","hash":"ad420043e1d0518bfbf3b2a2d87fb5b104587c6f","modified":1675136410831},{"_id":"themes/maupassant/source/css/donate.scss","hash":"d9ef1520e136198c0ae13acef7da22a275fb4dbf","modified":1675136410831},{"_id":"themes/maupassant/source/css/search.scss","hash":"a1720a63170ff4ae9048f634e8e1900e7a3cc45a","modified":1675136410831},{"_id":"themes/maupassant/source/css/style.scss","hash":"87728a8270ef74dcedc7dd5258aa4e2b1ddf05f2","modified":1687944856578},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1675136410838},{"_id":"themes/maupassant/source/img/avatar.png","hash":"2f701dadc2dc8eb637f48b5eedf9bca7fb5fd031","modified":1675136410839},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1675136410839},{"_id":"themes/maupassant/source/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1675136410839},{"_id":"themes/maupassant/source/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1675136410840},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1675136410841},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1675136410840},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1675136410841},{"_id":"themes/maupassant/source/js/copycode.js","hash":"6df3139581744e7bcd47243e4587f5397c2a24c3","modified":1675136410841},{"_id":"themes/maupassant/source/js/copyright.js","hash":"0e9a845ae05d2f00721ff6ee910c8c3cace26043","modified":1675136410842},{"_id":"themes/maupassant/source/js/donate.js","hash":"82f06bd69782c1138c98b4276771a41e3a54c061","modified":1675136410842},{"_id":"themes/maupassant/source/js/love.js","hash":"60df5dc3d09c8f33d1d02f54cbc73bf8d62f52fb","modified":1675136410843},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"cbfae8d963e8a84d8472093e57576de18af3b45b","modified":1687944856587},{"_id":"themes/maupassant/source/js/recent-comments.js","hash":"b09acdd54126290268e1ab554433afa1d8f64aaf","modified":1675136410843},{"_id":"themes/maupassant/source/js/search.js","hash":"65d8e6d6c46fa060ce5b0d89e2fd778b6b2967d5","modified":1675136410844},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1675136410844},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1675136410845},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1675136410845},{"_id":"source/_posts/MyPromise.js","hash":"691ea708b4f1db5702adc450678d9f43add11fff","modified":1675214750891},{"_id":"source/_posts/about.md","hash":"fb916c25048ef04c1b8cc0a406c5c76efb083da5","modified":1687944770977},{"_id":"source/_posts/promise-detail.md","hash":"0e62c1cd785c94517f8635db8ad2a87dcc500ca9","modified":1687944770978},{"_id":"source/_posts/hexo-basic.md","hash":"067c917be1ec6b655ce60d0f294a1427d708bf59","modified":1675752034908},{"_id":"source/_posts/simple-promise.js","hash":"0497a158b74c287e0e4dcee518cc927add56fbe0","modified":1675754435080},{"_id":"source/_posts/my-promise.js","hash":"ce753918218b79aa205a0514752a9a7b3befffa6","modified":1675752563412},{"_id":"public/2023/01/31/my-promise/index.html","hash":"7b94bdd3358a753e41920c10717600a00181e12e","modified":1677825730636},{"_id":"public/about/index.html","hash":"64b7e8fa4cd0dad1facc26b2bb74a15238bf7147","modified":1677825730636},{"_id":"public/2023/01/31/hexo-basic/index.html","hash":"06529934ee5dc38330dfecbd39f7d0f271010649","modified":1677825730636},{"_id":"public/categories/工具/index.html","hash":"dc9166f14381a460628507e17e1507ff87d95d78","modified":1677825730636},{"_id":"public/categories/前端/index.html","hash":"bbea8e86ba460fea06396d21b0326f1d9271dad0","modified":1677825730636},{"_id":"public/archives/index.html","hash":"9c5af83710259e0091980f08e58d00ed81dddc39","modified":1677825730636},{"_id":"public/archives/2023/index.html","hash":"9c5af83710259e0091980f08e58d00ed81dddc39","modified":1677825730636},{"_id":"public/archives/2023/01/index.html","hash":"9c5af83710259e0091980f08e58d00ed81dddc39","modified":1677825730636},{"_id":"public/index.html","hash":"55741c54e174d3e017cbca4361241959011c2e2a","modified":1677825730636},{"_id":"public/tags/文档工具/index.html","hash":"2f2a3e3c38899fc74a90766c0787bf9a4d4d995b","modified":1677825730636},{"_id":"public/tags/ES6/index.html","hash":"2f5a91dea6fae3c62ccd6563b0299f29a4ceaf3e","modified":1677825730636},{"_id":"public/tags/Promise/index.html","hash":"4dadd107dd787050035f7831a75ed1c06b93992a","modified":1677825730636},{"_id":"public/2023/01/31/promise-detail/index.html","hash":"abca1cad0acdf0d75ccd6c3a49193275364f7784","modified":1677825730636},{"_id":"public/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1677825730636},{"_id":"public/img/avatar.png","hash":"2f701dadc2dc8eb637f48b5eedf9bca7fb5fd031","modified":1677825730636},{"_id":"public/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1677825730636},{"_id":"public/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1677825730636},{"_id":"public/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1677825730636},{"_id":"public/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1677825730636},{"_id":"public/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1677825730636},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1677825730636},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1677825730636},{"_id":"public/css/copycode.css","hash":"803d8bf898f47c3929665eb7af97da22f11efacd","modified":1677825730636},{"_id":"public/css/donate.css","hash":"d631def20dfb661439c506f28dc791f331d506f8","modified":1677825730636},{"_id":"public/css/copyright.css","hash":"e857156bd1f971fe6abdc22d2b8c82e495387438","modified":1677825730636},{"_id":"public/css/search.css","hash":"0d0f73b357c3bc5077ef657c73f679b22bea93fb","modified":1677825730636},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1677825730636},{"_id":"public/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1677825730636},{"_id":"public/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1677825730636},{"_id":"public/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1677825730636},{"_id":"public/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1677825730636},{"_id":"public/js/recent-comments.js","hash":"78708f86aa1fdcc003a056b1f91aac62d31bb012","modified":1677825730636},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1677825730636},{"_id":"public/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1677825730636},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1677825730636},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1677825730636},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1677825730636},{"_id":"public/css/style.css","hash":"5f575fb9c7570c01910d53c8aa4997944f94cc6d","modified":1677825730636},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1677825730636},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1677825730636},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1677825730636},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1677825730636},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1677825730636},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1677825730636},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1677825730636},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1677825730636},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1677825730636},{"_id":"source/_posts/hooks.md","hash":"76183c05b831a0836c82cec4b04cb617dee61b8c","modified":1687944770977},{"_id":"source/_posts/sort-search.md","hash":"8017348cf485fa69b46ab90b9419b663a19c4c76","modified":1687944770978}],"Category":[{"name":"工具","_id":"cldjn6rjj0005b0v44epg8xbf"},{"name":"前端","_id":"cldjpx6so000570v42cafaplw"}],"Data":[],"Page":[],"Post":[{"title":"关于","date":"2023-01-31T04:16:06.000Z","_content":"\n## 关于我 (hanbin)\n\n### 教育背景：\n\n2015.9 - 2019.6 武汉工程大学 物联网工程\n\n### 主要工作经历：\n\n2018.9-2019.1 用友金融科技股份有限公司 Java 实习岗\n2019.4-2021.7 烽火通信科技股份有限公司 前端开发岗【Angular 2+】\n2021.8-至今 青藤云 前端开发岗\n\n### 兴趣爱好：\n\n刷剧追番、逛 b 站\n跑步、乒乓球、羽毛球【技术菜】\n看书、看公众号、看博客、逛知乎\n喜欢技术，无奈技术菜【人菜求人带】\n\n### 电子邮件:\n\nhanbin_che@163.com\n","source":"_posts/about.md","raw":"---\ntitle: 关于\ndate: 2023-01-31 12:16:06\ntags:\npermalink: /about/\n---\n\n## 关于我 (hanbin)\n\n### 教育背景：\n\n2015.9 - 2019.6 武汉工程大学 物联网工程\n\n### 主要工作经历：\n\n2018.9-2019.1 用友金融科技股份有限公司 Java 实习岗\n2019.4-2021.7 烽火通信科技股份有限公司 前端开发岗【Angular 2+】\n2021.8-至今 青藤云 前端开发岗\n\n### 兴趣爱好：\n\n刷剧追番、逛 b 站\n跑步、乒乓球、羽毛球【技术菜】\n看书、看公众号、看博客、逛知乎\n喜欢技术，无奈技术菜【人菜求人带】\n\n### 电子邮件:\n\nhanbin_che@163.com\n","slug":"about","published":1,"updated":"2023-06-28T09:32:50.977Z","__permalink":"/about/","_id":"cldjq9281000970v4gibwbr4r","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"关于我-hanbin\"><a href=\"#关于我-hanbin\" class=\"headerlink\" title=\"关于我 (hanbin)\"></a>关于我 (hanbin)</h2><h3 id=\"教育背景：\"><a href=\"#教育背景：\" class=\"headerlink\" title=\"教育背景：\"></a>教育背景：</h3><p>2015.9 - 2019.6 武汉工程大学 物联网工程</p>\n<h3 id=\"主要工作经历：\"><a href=\"#主要工作经历：\" class=\"headerlink\" title=\"主要工作经历：\"></a>主要工作经历：</h3><p>2018.9-2019.1 用友金融科技股份有限公司 Java 实习岗<br>2019.4-2021.7 烽火通信科技股份有限公司 前端开发岗【Angular 2+】<br>2021.8-至今 青藤云 前端开发岗</p>\n<h3 id=\"兴趣爱好：\"><a href=\"#兴趣爱好：\" class=\"headerlink\" title=\"兴趣爱好：\"></a>兴趣爱好：</h3><p>刷剧追番、逛 b 站<br>跑步、乒乓球、羽毛球【技术菜】<br>看书、看公众号、看博客、逛知乎<br>喜欢技术，无奈技术菜【人菜求人带】</p>\n<h3 id=\"电子邮件\"><a href=\"#电子邮件\" class=\"headerlink\" title=\"电子邮件:\"></a>电子邮件:</h3><p><a href=\"mailto:&#104;&#x61;&#x6e;&#98;&#x69;&#x6e;&#95;&#99;&#104;&#x65;&#x40;&#x31;&#x36;&#51;&#x2e;&#99;&#x6f;&#x6d;\">&#104;&#x61;&#x6e;&#98;&#x69;&#x6e;&#95;&#99;&#104;&#x65;&#x40;&#x31;&#x36;&#51;&#x2e;&#99;&#x6f;&#x6d;</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我-hanbin\"><a href=\"#关于我-hanbin\" class=\"headerlink\" title=\"关于我 (hanbin)\"></a>关于我 (hanbin)</h2><h3 id=\"教育背景：\"><a href=\"#教育背景：\" class=\"headerlink\" title=\"教育背景：\"></a>教育背景：</h3><p>2015.9 - 2019.6 武汉工程大学 物联网工程</p>\n<h3 id=\"主要工作经历：\"><a href=\"#主要工作经历：\" class=\"headerlink\" title=\"主要工作经历：\"></a>主要工作经历：</h3><p>2018.9-2019.1 用友金融科技股份有限公司 Java 实习岗<br>2019.4-2021.7 烽火通信科技股份有限公司 前端开发岗【Angular 2+】<br>2021.8-至今 青藤云 前端开发岗</p>\n<h3 id=\"兴趣爱好：\"><a href=\"#兴趣爱好：\" class=\"headerlink\" title=\"兴趣爱好：\"></a>兴趣爱好：</h3><p>刷剧追番、逛 b 站<br>跑步、乒乓球、羽毛球【技术菜】<br>看书、看公众号、看博客、逛知乎<br>喜欢技术，无奈技术菜【人菜求人带】</p>\n<h3 id=\"电子邮件\"><a href=\"#电子邮件\" class=\"headerlink\" title=\"电子邮件:\"></a>电子邮件:</h3><p><a href=\"mailto:&#104;&#x61;&#x6e;&#98;&#x69;&#x6e;&#95;&#99;&#104;&#x65;&#x40;&#x31;&#x36;&#51;&#x2e;&#99;&#x6f;&#x6d;\">&#104;&#x61;&#x6e;&#98;&#x69;&#x6e;&#95;&#99;&#104;&#x65;&#x40;&#x31;&#x36;&#51;&#x2e;&#99;&#x6f;&#x6d;</a></p>\n"},{"title":"Promise详解","date":"2023-01-31T03:46:20.000Z","toc":true,"_content":"\n## 前言\n\nPromise 是 ES6 异步编程的核心，很多库的异步都从回调向 Promise 转变，Promise 在前端领域发挥着越来越重要的作用；掌握 Promise 的正确使用、理解 Promise 的实现成为了现代前端开发者不可或缺的技能。\n\n<!--\n### Promise 是什么\n\n### Promise 如何使用\n\n### Promise 什么场景|时候使用\n-->\n\n## Promise 的核心原理实现\n\n首先我们从 Promise 的定义和使用方式开始分析 Promise。\n\n### Promise 的使用分析\n\nPromise 是一个类，在执行这个类的时候，需要传递一个执行器参数，执行器会立即执行。\n\n#### Promise 的三个状态\n\n- pending → 等待\n- fulfilled → 成功\n- rejected → 失败\n\n#### 状态切换\n\n- pending → fulfilled\n- pending → rejected\n\n#### 一旦状态发生改变，状态将不可变\n\n- 执行器中的两个参数，分别是 resolve 和 reject，其实就是两个回调函数，调用 resolve 是从 pending 状态转变为 fulfilled 状态，调用 reject 是从 pending 状态转变为 rejected 状态。传递给这两个回调函数的参数会作为成功或失败的值。\n- Promise 实例对象具有一个 then 方法，该方法接受两个回调函数，分别来处理成功与失败的状态，then 方法内部会进行判断，然后根据当前的状态调用对应的回调函数。then 方法应该是被定义在原型对象中的。\n- then 的回调函数中都包含一个值，如果是成功，表示成功后返回的值；如果是失败，就表示失败的原因。\n\n### MyPromise 的实现\n\n根据上述分析，我们可以给出如下实现：\n\n```js\n// 所有状态\nconst PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\n// Promise 本质上是一个类\nclass MyPromise {\n  constructor(executor) {\n    // 实例化Promise时需要一个执行器回调，该回调立即执行\n    executor(this.resolve, this.reject);\n  }\n\n  //   Promise 的初始状态;\n  status = PENDING;\n  // 记录成功与失败的值\n  value = undefined;\n  reason = undefined;\n\n  // 此处使用箭头函数为了解决resolve调用中this的指向问题\n  resolve = (value) => {\n    // 如果状态不是 PENDING 直接跳出该逻辑\n    if (this.status !== PENDING) return;\n    // 将状态修改为 成功\n    this.status = FULFILLED;\n\n    // 将 resolve 回调的参数进行保存\n    this.value = value;\n  };\n\n  reject = (reason) => {\n    if (this.status !== PENDING) return;\n\n    // 将状态修改为失败\n    this.status = REJECTED;\n\n    // 保存失败的原因\n    this.reason = reason;\n  };\n\n  then = (onFulfilled, onRejected) => {\n    // 根据当前状态指定回调\n    if (this.status === FULFILLED) {\n      // 将成功的值作为回调函数的参数返回\n      onFulfilled(this.value);\n    } else if (this.status === REJECTED) {\n      // 将失败的值作为回调函数的参数返回\n      onRejected(this.reason);\n    }\n  };\n}\n```\n\n接下来我们给出一段验证代码：\n\n**验证 resolve**\n\n```js\nconst MyPromise = require('./my-promise');\n\nconst promise = new MyPromise((resolve, reject) => {\n  resolve('Hello Promise Resolve~');\n});\npromise.then(\n  (value) => {\n    console.log(value);\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n\n// Hello Promise Resolve~\n```\n\n**验证 reject**\n\n```js\nconst MyPromise = require('./my-promise');\n\nconst promise = new MyPromise((resolve, reject) => {\n  reject('Hello Promise Reject~');\n});\npromise.then(\n  (value) => {\n    console.log(value);\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n\n// Hello Promise Reject~\n```\n\n**验证状态不可变**\n\n```js\nconst MyPromise = require('./my-promise');\n\nconst promise = new MyPromise((resolve, reject) => {\n  resolve('Hello Promise Resolve~');\n  reject('Hello Promise Reject~');\n});\npromise.then(\n  (value) => {\n    console.log(value);\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n\n// Hello Promise Resolve~\n```\n\n**测试异步**\n\n上述简易版 Promise 中如果存在异步操作将无法正确处理\n\n```js\nconst MyPromise = require('./my-promise');\nconst promise = new MyPromise((resole, reject) => {\n  setTimeout(resolve, 2000, 'Hello Promise Resolve~');\n});\n\npromise.then(\n  (value) => {\n    console.log(value);\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n```\n\n上述代码将不会有任何输出\n\n**原因分析**\n\n- MyPromise 的实现中没有考虑异步的实现，在异步函数中修改 Promise 的状态后没有调用 then 回调\n- then 回调先于 resolve/reject 执行，此时 Promise 的状态还处于 PENDING，将不会执行任何操作[MyPromise 中未对该阶段进行处理]\n\n### 在 Promise 中加入异步操作\n\n根据 `原因分析` 给出如下解决办法：\n\n1. 创建 `onFulfilled` 和 `onRejected` 两个属性用来存储 then 中的回调\n2. 为 `then` 方法添加状态为 `PENDING` 的处理逻辑，及时将 onFulfilled 和 onRejected 回调进行存储，便于在异步方法中调用 resolve/reject 变更状态时及时触发对应的 then 中的回调\n3. 在成功或失败时及时调用对应的 onFulfilled 或者 onRejected 回调\n\n增加异步操作的 Promise 实现如下：\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 实例化Promise时需要一个执行器回调，该回调立即执行\n    executor(this.resolve, this.reject);\n  }\n\n  //   Promise 的初始状态;\n  status = PENDING;\n  // 记录成功与失败的值\n  value = undefined;\n  reason = undefined;\n\n  // then中的onFulfilled和onRejected回调\n  onFulfilled = undefined;\n  onRejected = undefined;\n\n  // 此处使用箭头函数为了解决resolve调用中this的指向问题\n  resolve = (value) => {\n    // 如果状态不是 PENDING 直接跳出该逻辑\n    if (this.status !== PENDING) return;\n    // 将状态修改为 成功\n    this.status = FULFILLED;\n\n    // 将 resolve 回调的参数进行保存\n    this.value = value;\n\n    // 如果状态变更为 成功，调用成功的回调\n    this.onFulfilled && this.onFulfilled(this.value);\n  };\n\n  reject = (reason) => {\n    if (this.status !== PENDING) return;\n\n    // 将状态修改为失败\n    this.status = REJECTED;\n\n    // 保存失败的原因\n    this.reason = reason;\n\n    // 如果状态变更为 失败，调用失败的回调\n    this.onRejected && this.onRejected(this.reason);\n  };\n\n  then = (onFulfilled, onRejected) => {\n    // 根据当前状态指定回调\n    if (this.status === FULFILLED) {\n      // 将成功的值作为回调函数的参数返回\n      onFulfilled(this.value);\n    } else if (this.status === REJECTED) {\n      // 将失败的值作为回调函数的参数返回\n      onRejected(this.reason);\n    } else {\n      // 既不是成功也不是失败。这个时候保存传递进来的两个回调，便于 异步操作中 更新 Promise 状态时，触发对应的回调\n      this.onFulfilled = onFulfilled;\n      this.onRejected = onRejected;\n    }\n  };\n}\n```\n\n**验证多次 then 调用**\n\n```js\nconst promise = new MyPromise((resolve) => {\n  setTimeout(resolve, 2000, 'Hello Promise Resolve~');\n});\npromise.then(\n  (value) => {\n    console.log(value + ' first.');\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\npromise.then(\n  (value) => {\n    console.log(value + ' second.');\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\npromise.then(\n  (value) => {\n    setTimeout(() => {\n      console.log(value + ' third.');\n    }, 1000);\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n// 3s后输出： Hello Promise Resolve~ third.\n```\n\n**原因分析**\n\n如果执行器中存在**异步逻辑**，`then 函数又先于 异步逻辑 执行`，导致多次 `then` 调用存在覆盖 bug，即在后面的 then 调用会覆盖前面的 `then` 回调\n\n### 实现 then 方法的多次调用\n\n根据 `原因分析` 给出如下解决方案：\n\n1. 将保存 `then` 回调的 onFulfilled 和 onRejected 属性改为数组形式，便于存储多个 `then` 回调.\n\n增加存储多次 then 回调的实现如下：\n\n```js\n/**\n * 定义所有状态常量\n */\nconst PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\n/**\n * Promise是一个类\n */\nclass MyPromise {\n  constructor(executor) {\n    executor(this.resolve, this.reject);\n  }\n\n  status = PENDING;\n  value = undefined;\n  reason = undefined;\n\n  onFulfilled = [];\n  onRejected = [];\n\n  resolve = (value) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = FULFILLED;\n    this.value = value;\n\n    while (this.onFulfilled.length) {\n      this.onFulfilled.shift()(this.value);\n    }\n  };\n\n  reject = (reason) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = REJECTED;\n    this.reason = reason;\n\n    while (this.onRejected.length) {\n      this.onRejected.shift()(this.reason);\n    }\n  };\n\n  then = (onFulfilled, onRejected) => {\n    if (this.status === FULFILLED) {\n      onFulfilled(this.value);\n    }\n\n    if (this.status === REJECTED) {\n      onRejected(this.reason);\n    }\n\n    if (this.status === PENDING) {\n      // 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调\n      this.onFulfilled.push(onFulfilled);\n      this.onRejected.push(onRejected);\n    }\n  };\n}\n```\n\n**验证多次 then 调用**\n\n```js\nconst promise = new MyPromise((resolve) => {\n  resolve('Hello Promise Resolve~');\n});\npromise.then(\n  (value) => {\n    console.log(value + ' first.');\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\npromise.then(\n  (value) => {\n    console.log(value + ' second.');\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\npromise.then(\n  (value) => {\n    setTimeout(() => {\n      console.log(value + ' third.');\n    }, 1000);\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n// 输出\n// 立即输出：\n// Hello Promise Resolve~ first.\n// Hello Promise Resolve~ second.\n// 1s后输出\n// Hello Promise Resolve~ third.\n\nconst promise = new MyPromise((resolve) => {\n  setTimeout(resolve, 2000, 'Hello Promise Resolve~');\n});\npromise.then(\n  (value) => {\n    console.log(value + ' first.');\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\npromise.then(\n  (value) => {\n    console.log(value + ' second.');\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\npromise.then(\n  (value) => {\n    setTimeout(() => {\n      console.log(value + ' third.');\n    }, 1000);\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n// 输出\n// 2s后输出：\n// Hello Promise Resolve~ first.\n// Hello Promise Resolve~ second.\n// 3s后输出\n// Hello Promise Resolve~ third.\n```\n\n### <text style=\"color: red;\">实现 then 方法的链式调用[难点]</text>\n\n**要想实现 then 的链式调用，主要需要解决两个问题：**\n\n1. 返回的是一个新的 `MyPromise` 的实例；\n2. `then` 的返回值作为下一次的链式调用的参数。\n\n**这里分为两种情况：**\n\n1. 直接返回一个值，可以直接作为值使用；\n2. 返回一个新的 `MyPromise` 实例，此时就需要判断其状态；\n\n**代码实现**：\n\n```js\n/**\n * 定义所有状态常量\n */\nconst PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\n/**\n * Promise是一个类\n */\nclass MyPromise {\n  constructor(executor) {\n    executor(this.resolve, this.reject);\n  }\n\n  status = PENDING;\n  value = undefined;\n  reason = undefined;\n\n  onFulfilled = [];\n  onRejected = [];\n\n  resolve = (value) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = FULFILLED;\n    this.value = value;\n\n    while (this.onFulfilled.length) {\n      this.onFulfilled.shift()(this.value);\n    }\n  };\n\n  reject = (reason) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = REJECTED;\n    this.reason = reason;\n\n    while (this.onRejected.length) {\n      this.onRejected.shift()(this.reason);\n    }\n  };\n\n  then = (onFulfilled, onRejected) => {\n    // then 方法返回一个 MyPromise 实例\n    return new MyPromise((resolve, reject) => {\n      if (this.status === FULFILLED) {\n        const result = onFulfilled(this.value);\n\n        // 如果result是一个普通值，直接resolve(result)\n        // 如果是一个 MyPromise 实例，根据返回的解决来决定时调用 resolve 还是 reject\n        resolvePromise(result, resolve, reject);\n      }\n\n      if (this.status === REJECTED) {\n        onRejected(this.reason);\n      }\n\n      if (this.status === PENDING) {\n        // 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调\n        this.onFulfilled.push(onFulfilled);\n        this.onRejected.push(onRejected);\n      }\n    });\n  };\n}\n\nfunction resolvePromise(result, resolve, reject) {\n  if (result instanceof MyPromise) {\n    result.then(resolve, reject);\n  } else {\n    resolve(result);\n  }\n}\n```\n\n**验证链式调用**\n\n```js\nconst promise1 = new MyPromise((resolve) => {\n  resolve('Hello Promise Resolve~');\n});\nconst promise2 = promise1.then(\n  (value) => {\n    console.log(value + ' promise1.');\n    // 当前 Promise 的 resolve 回调函数的返回值将作为下一个链式调用的 then 中的 onFulfilled 回调函数的参数值\n    return 'Hello Promise2 Resolve~';\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n\npromise2.then(\n  // 此处的 value 即为 'Hello Promise2 Resolve~'\n  (value) => {\n    console.log(value + ` promise2.`);\n  },\n  (reason) => {\n    console.log(reason + ` promise2.`);\n  }\n);\n\n// 输出：\n// Hello Promise Resolve~ promise1.\n// Hello Promise2 Resolve~ promise2.\n```\n\n### then 方法链式调用识别 Promise 对象自返回 [难点]\n\n在 Promise 中，如果 `then` 方法返回的是自己的 `Promise` 对象，则会发生 `Promise` 的嵌套，这个时候程序会报错。\n\n**测试代码**\n\n```js\nconst p1 = new Promise((resolve, reject) => {\n  resolve(12);\n});\nconst p2 = p1.then((v) => {\n  console.log(v);\n  return p2;\n});\np2.then((v) => console.log(v));\n\n// 输出：\n// 12\n// Promise {<rejected>: TypeError: Chaining cycle detected for promise #<Promise>}\n// Uncaught (in promise) TypeError: Chaining cycle detected for promise #<Promise>\n```\n\n**解决办法**\n\n只需判断 `then` 返回的 Promise 实例与 then 中回调函数返回的实例是否是同一个即可，如果是引用的同一个实例，那么就抛出错误\n\n**实现代码**\n\n```js\n/**\n * 定义所有状态常量\n */\nconst PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\n/**\n * Promise是一个类\n */\nclass MyPromise {\n  constructor(executor) {\n    executor(this.resolve, this.reject);\n  }\n\n  status = PENDING;\n  value = undefined;\n  reason = undefined;\n\n  onFulfilled = [];\n  onRejected = [];\n\n  resolve = (value) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = FULFILLED;\n    this.value = value;\n\n    while (this.onFulfilled.length) {\n      this.onFulfilled.shift()(this.value);\n    }\n  };\n\n  reject = (reason) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = REJECTED;\n    this.reason = reason;\n\n    while (this.onRejected.length) {\n      this.onRejected.shift()(this.reason);\n    }\n  };\n\n  then = (onFulfilled, onRejected) => {\n    // then 方法返回一个 MyPromise 实例\n    const promise = new MyPromise((resolve, reject) => {\n      if (this.status === FULFILLED) {\n        // 如果不用异步是拿不到 then 中生成的新 Promise 实例的\n        setTimeout(() => {\n          const result = onFulfilled(this.value);\n\n          resolvePromise(promise, result, resolve, reject);\n        }, 0);\n      }\n\n      if (this.status === REJECTED) {\n        onRejected(this.reason);\n      }\n\n      if (this.status === PENDING) {\n        // 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调\n        this.onFulfilled.push(onFulfilled);\n        this.onRejected.push(onRejected);\n      }\n    });\n\n    return promise;\n  };\n}\n\nfunction resolvePromise(promise, result, resolve, reject) {\n  // 如果 promise 和 then 的返回值是同一个实例的话，需要抛出异常\n  if (promise === result) {\n    // 这里调用reject，并抛出一个Error\n    // return 是必须的，阻止程序向下执行\n    return reject(\n      new TypeError('Chaining cycle detected for promise #<Promise>')\n    );\n  } else {\n    // 判断 result 是不是 MyPromise 实例\n    if (result instanceof MyPromise) {\n      // 如果 result 是 MyPromise 实例的话，需要根据 result 的状态调用 resolve 或者 reject\n      result.then(resolve, reject);\n    } else {\n      resolve(result);\n    }\n  }\n}\n```\n\n> 这里 then 方法中的 setTimeout 的作用并不是延迟执行，而是为了调用 resolvePromise 函数时，保证创建的 promise 存在。\n\n**验证代码**\n\n```js\nconst promise1 = new MyPromise((resolve) => {\n  resolve('Hello Promise Resolve~');\n});\nconst promise2 = promise1.then(\n  (value) => {\n    console.log(value + ' promise1.');\n    return promise2;\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n\npromise2.then(\n  (value) => {\n    console.log(value + ` promise2.`);\n  },\n  (reason) => {\n    console.log(reason + ` promise2.`);\n  }\n);\n// 输出：\n// Hello Promise Resolve~ promise1.\n// TypeError: Chaining cycle detected for promise #<Promise> promise2.\n```\n\n## 捕捉错误及 then 链式调用其他状态代码补充\n\n到目前为止我们实现的 Promise 并没有对异常做任何处理，为了保证代码的健壮性，我们需要对异常做一些处理。\n\n### 捕捉执行器报错\n\n如果执行器函数在执行过程中发生了异常，需要捕获异常并且在捕获逻辑中调用 reject 将异常传出去\n\n**关键实现代码**\n\n```js\nconstructor(executor) {\n  try {\n    executor(this.resolve, this.reject);\n  } catch (error) {\n    this.reject(error);\n  }\n}\n```\n\n**测试代码**\n\n```js\nconst promise1 = new MyPromise((resolve) => {\n  throw new Error('执行器异常');\n});\npromise1.then(console.log, console.log);\n\n// 输出：\n// Error: 执行器异常\n//     at E:\\blog\\source\\_posts\\my-promise.js:100:11\n//     at new MyPromise (E:\\blog\\source\\_posts\\my-promise.js:14:13)\n//     at Object.<anonymous> (E:\\blog\\source\\_posts\\my-promise.js:99:18)\n//     at Module._compile (node:internal/modules/cjs/loader:1126:14)\n//     at Object.Module._extensions..js (node:internal/modules/cjs/loader:1180:10)\n//     at Module.load (node:internal/modules/cjs/loader:1004:32)\n//     at Function.Module._load (node:internal/modules/cjs/loader:839:12)\n//     at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n//     at node:internal/main/run_main_module:17:47\n```\n\n### 捕捉 then 中的报错\n\n如果需要捕获 `then` 中的异常，与执行器中同理，需要在 then 中将捕获到的异常通过 reject 传递出去，异常需要通过 `try...catch` 捕获。\n\n**关键实现代码**\n\n```js\nthen = (onFulfilled, onRejected) => {\n  // then 方法返回一个 MyPromise 实例\n  const promise = new MyPromise((resolve, reject) => {\n    if (this.status === FULFILLED) {\n      // 如果不用异步是拿不到 then 中生成的新 Promise 实例的\n      setTimeout(() => {\n        try {\n          // 将成功的值作为参数返回\n          // 保存执行回调函数的结果\n          const result = onFulfilled(this.value);\n\n          // 如果返回的是一个普通的值，直接调用resolve\n          // 如果是一个MyPromise实例，根据返回的promise实例状态来决定是调用resolve，还是reject\n          resolvePromise(promise, result, resolve, reject);\n        } catch (error) {\n          reject(error);\n        }\n      }, 0);\n    }\n\n    // 将失败的原因作为参数返回\n    if (this.status === REJECTED) {\n      onRejected(this.reason);\n    }\n\n    if (this.status === PENDING) {\n      // 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调\n      this.onFulfilled.push(onFulfilled);\n      this.onRejected.push(onRejected);\n    }\n  });\n\n  return promise;\n};\n```\n\n**测试代码**\n\n```js\nconst promise1 = new MyPromise((resolve) => {\n  resolve(Math.PI);\n});\npromise1\n  .then((pi) => console.log(2 * pi * r), console.log)\n  .then(console.log, console.log);\n\n// 输出：\n// ReferenceError: r is not defined\n//     at E:\\blog\\source\\_posts\\my-promise.js:112:40\n//     at Timeout._onTimeout (E:\\blog\\source\\_posts\\my-promise.js:64:40)\n//     at listOnTimeout (node:internal/timers:559:17)\n//     at processTimers (node:internal/timers:502:7)\n```\n\n### 错误与异步状态的链式调用\n\n目前只对成功状态的 then 进行了链式调用以及错误处理，错误与异步状态未进行处理，参照成功状态下的错误处理进行实现\n\n**关键实现代码**\n\n```js\nthen = (onFulfilled, onRejected) => {\n  // then 方法返回一个 MyPromise 实例\n  const promise = new MyPromise((resolve, reject) => {\n    if (this.status === FULFILLED) {\n      // 如果不用异步是拿不到 then 中生成的新 Promise 实例的\n      setTimeout(() => {\n        try {\n          // 将成功的值作为参数返回\n          // 保存执行回调函数的结果\n          const result = onFulfilled(this.value);\n\n          // 如果返回的是一个普通的值，直接调用resolve\n          // 如果是一个MyPromise实例，根据返回的promise实例状态来决定是调用resolve，还是reject\n          resolvePromise(promise, result, resolve, reject);\n        } catch (error) {\n          reject(error);\n        }\n      }, 0);\n    }\n\n    // 将失败的原因作为参数返回\n    if (this.status === REJECTED) {\n      // 失败的处理同成功处理，只是调用的回调函数不同\n      setTimeout(() => {\n        try {\n          const result = onRejected(this.reason);\n          resolvePromise(promise, result, resolve, reject);\n        } catch (error) {\n          reject(error);\n        }\n      }, 0);\n    }\n\n    if (this.status === PENDING) {\n      // 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调\n      this.onFulfilled.push((value) => {\n        setTimeout(() => {\n          try {\n            const result = onFulfilled(value);\n            resolvePromise(promise, result, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        }, 0);\n      });\n      this.onRejected.push((reason) => {\n        setTimeout(() => {\n          try {\n            const result = onRejected(reason);\n            resolvePromise(promise, result, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        }, 0);\n      });\n    }\n  });\n\n  return promise;\n};\n```\n\n**测试代码**\n\n```js\nconst MyPromise = require('./myPromise');\nlet promise = new MyPromise((resolve, reject) => {\n  setTimeout(resolve, 2000, '成功');\n});\n// 第一个then方法中的错误要在第二个then方法中捕获到\npromise\n  .then((value) => {\n    console.log('resolve', value);\n    throw new Error('then的执行过程中遇到异常');\n  })\n  .then(null, (reason) => {\n    console.log(reason.message);\n  });\n/* 输出\n    resolve 成功\n    then的执行过程中遇到异常\n*/\n```\n\n## 将 then 方法的参数变成可选参数\n\nPromise 中的 then 方法其实是两个*可选参数*，如果我们不传递任何参数的话，里面的结果是向下传递的，直到捕获为止。\n\n**示例代码**\n\n```js\nnew Promise((resolve, reject) => {\n  resolve(100);\n})\n  .then()\n  .then()\n  .then()\n  .then((value) => console.log(value));\n// 最后一个then输入100\n```\n\n**这段代码可以理解为**\n\n```js\nnew Promise((resolve, reject) => {\n  resolve(100);\n})\n  .then((value) => value)\n  .then((value) => value)\n  .then((value) => value)\n  .then((value) => console.log(value));\n```\n\n**关键实现**\n\n```js\n// then方法的实现\nthen (onFulfilled, onRejected) {\n    // 如果传递函数，就是用传递的函数，否则指定一个默认值，用于参数传递\n    onFulfilled = onFulfilled ? onFulfilled : value => value\n    // 同理\n    onRejected = onRejected ? onRejected : reason => { throw reason }\n    // then 方法返回一个MyPromise实例\n    const promise = new MyPromise((resolve, reject) => {\n        // 判断当前状态,根据状态调用指定回调\n        if (this.status === FULFILLED) {...\n        } else if (this.status === REJECTED) {...\n        } else {...\n        }\n    })\n    return promise\n}\n```\n\n## Promise.all 方法的实现\n\n简单的说 `Promise.all()` 会将多个 Promise 实例包装为一个 Promise 实例，且顺序与调用顺序一致:\n**示例代码**\n\n```js\nfunction p1() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('p1');\n    }, 2000);\n  });\n}\nfunction p2() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('p2');\n    }, 0);\n  });\n}\nPromise.all(['a', 'b', p1(), p2(), 'c']).then((result) => {\n  console.log(result);\n  // [\"a\", \"b\", \"p1\", \"p2\", \"c\"]\n});\n```\n\n在这段代码中，我们的 p1 的执行是延迟了 2s 的，这里如果不使用 Promise.all()的话最终顺序是与我们调用不同的。\n\n**分析 Promise.all 的实现思路**\n\n- `all()` 方法是通过类直接调用的，所以是一个静态方法\n- `all()` 方法接收一个数组，数组中的值可以是一个普通值，也可以是一个 MyPromise 实例\n- return 一个新的 MyPromise 实例\n- 遍历数组中的每一个值，判断值的类型，如果是一个普通值就直接将值存入一个结果数组；如果是一个 MyPromise 实例对象，会调用其 then 方法，然后根据执行后的状态，如果失败的话调用 MyPromise 的 reject 方法，如果成功的话将值存入结果数组；\n- 存入数组时计数，如果存入的数量达到传入的数组长度，说明调用完毕，执行 `resolve` 并将最终的结果数组作为参数返回。\n\n**关键实现**\n\n```js\nMyPromise.all = (array) => {\n  // 用于存放最终结果的数组\n  let result = [];\n  // 用于计算当前已经执行完的实例的数量，用于指定当前数据项结果在 result 中的索引位置\n  let count = 0;\n\n  // 返回一个 MyPromise 实例\n  return new MyPromise((resolve, reject) => {\n    function addResult(result, index, value, resolve) {\n      // 根据索引值，将结果推入数组中\n      result[index] = value;\n\n      // 执行完毕一个 count+1，如果当前值等于总长度的话说明已经执行结束了，可以直接调用resolve，说明已经成功执行完毕了\n      if (++count === array.length) {\n        // 将执行结果返回\n        resolve(result);\n      }\n    }\n\n    // 遍历传入的数组\n    array.forEach((item, index) => {\n      // 如果是 MyPromise 实例，则调用 then 方法，获取该实例的值，并将值存入到 result数组的 index 指定索引中\n      if (item instanceof MyPromise) {\n        item.then(\n          (value) => {\n            addResult(result, index, value, resolve);\n          },\n          // 如果失败直接返回失败原因\n          (reason) => {\n            reject(reason);\n          }\n        );\n      } else {\n        addResult(result, index, item, resolve);\n      }\n    });\n  });\n};\n```\n\n**测试示例**\n\n```js\nfunction p1() {\n  return new MyPromise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('p1');\n    }, 2000);\n  });\n}\nfunction p2() {\n  return new MyPromise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('p2');\n    }, 0);\n  });\n}\nMyPromise.all(['a', 'b', p1(), p2(), 'c']).then((result) => {\n  console.log(result);\n  // [\"a\", \"b\", \"p1\", \"p2\", \"c\"]\n});\n```\n\n## Promise.resolve 方法的实现\n\n关于 Promise.resolve()方法的用法可以参考 Promise.resolve()与 Promise.reject()。\n**直线思路分析**\n\n- 该方法是一个静态方法\n- 该方法接收的如果是一个值就直接将该值包装为一个 MyPromise 实例对象返回,如果是一个 MyPromise 实例对象,则直接返回\n\n**关键实现**\n\n```js\nMyPromise.resolve = (value) => {\n  // 如果是MyPromise的实例，就直接返回这个实例\n  if (value instanceof MyPromise) {\n    return value;\n  } else {\n    // 如果不是的话创建一个MyPromise实例，并返回传递的值\n    return new MyPromise((resolve) => resolve(value));\n  }\n};\n```\n\n**测试代码**\n\n```js\nfunction p1() {\n  return new MyPromise((resolve, reject) => {\n    reject('p1');\n  });\n}\nfunction p2() {\n  return new MyPromise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('p2');\n    }, 2000);\n  });\n}\nMyPromise.resolve(p1()).then(console.log, console.log);\nMyPromise.resolve(3.1415926).then(console.log);\nMyPromise.resolve(p2()).then(console.log, console.log);\n// 输出\n// p1\n// 3.1415926\n// 2s后输出\n// p2\n```\n\n## finally 方法的实现\n\n**实现思路分析**\n\n- 不管 Promise 是 Fulfilled 还是 Rejected 状态,都会调用 finally 函数中的回调参数\n- 返回一个新的 Promise 实例\n\n**关键实现**\n\n```js\nfinally(callback) {\n    return this.then(\n        value => new MyPromise.resolve(callback()).then(() => value),\n        reason => new MyPromise.resolve(callback()).then(() => { throw reason })\n    );\n}\n```\n\n**测试代码**\n\n```js\nfunction p1() {\n  return new MyPromise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('p1');\n    }, 2000);\n  });\n}\nfunction p2() {\n  return new MyPromise((resolve, reject) => {\n    reject('p2 reject');\n  });\n}\np2()\n  .finally(() => {\n    console.log('finally p2');\n    return p1();\n  })\n  .then(\n    (value) => {\n      console.log(value);\n    },\n    (reason) => {\n      console.log(reason);\n    }\n  );\n// finally p2\n// 两秒之后执行p2 reject\n```\n\n## catch 方法的实现\n\n关于 catch 方法可以参考 catch()，实现该方法其实非常简单，只需要在内部调用 then 方法，不传递第一个回调函数即可\n\n**关键实现**\n\n```js\ncatch(callback) {\n    return this.then(null, callback);\n}\n```\n\n**测试代码**\n\n```js\nfunction p() {\n  return new MyPromise((resolve, reject) => {\n    reject(new Error('reject'));\n  });\n}\np()\n  .then((value) => {\n    console.log(value);\n  })\n  .catch((reason) => console.log(reason));\n// 输出\n// Error: reject\n```\n\n## 完整代码\n\n```js\n/**\n * 定义所有状态常量\n */\nconst PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\n/**\n * Promise是一个类\n */\nclass MyPromise {\n  constructor(executor) {\n    try {\n      executor(this.resolve, this.reject);\n    } catch (error) {\n      this.reject(error);\n    }\n  }\n\n  status = PENDING;\n  value = undefined;\n  reason = undefined;\n\n  onFulfilled = [];\n  onRejected = [];\n\n  resolve = (value) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = FULFILLED;\n    this.value = value;\n\n    while (this.onFulfilled.length) {\n      this.onFulfilled.shift()(this.value);\n    }\n  };\n\n  reject = (reason) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = REJECTED;\n    this.reason = reason;\n\n    while (this.onRejected.length) {\n      this.onRejected.shift()(this.reason);\n    }\n  };\n\n  then = (onFulfilled, onRejected) => {\n    // 如果传递函数，就是用传递的函数，否则指定一个默认值，用于参数传递\n    onFulfilled = onFulfilled ? onFulfilled : (value) => value;\n    // 同理\n    onRejected = onRejected\n      ? onRejected\n      : (reason) => {\n          throw reason;\n        };\n\n    // then 方法返回一个 MyPromise 实例\n    const promise = new MyPromise((resolve, reject) => {\n      if (this.status === FULFILLED) {\n        // 如果不用异步是拿不到 then 中生成的新 Promise 实例的\n        setTimeout(() => {\n          try {\n            // 将成功的值作为参数返回\n            // 保存执行回调函数的结果\n            const result = onFulfilled(this.value);\n\n            // 如果返回的是一个普通的值，直接调用resolve\n            // 如果是一个MyPromise实例，根据返回的promise实例状态来决定是调用resolve，还是reject\n            resolvePromise(promise, result, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        }, 0);\n      }\n\n      // 将失败的原因作为参数返回\n      if (this.status === REJECTED) {\n        // 失败的处理同成功处理，只是调用的回调函数不同\n        setTimeout(() => {\n          try {\n            const result = onRejected(this.reason);\n            resolvePromise(promise, result, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        }, 0);\n      }\n\n      if (this.status === PENDING) {\n        // 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调\n        this.onFulfilled.push((value) => {\n          setTimeout(() => {\n            try {\n              const result = onFulfilled(value);\n              resolvePromise(promise, result, resolve, reject);\n            } catch (error) {\n              reject(error);\n            }\n          }, 0);\n        });\n        this.onRejected.push((reason) => {\n          setTimeout(() => {\n            try {\n              const result = onRejected(reason);\n              resolvePromise(promise, result, resolve, reject);\n            } catch (error) {\n              reject(error);\n            }\n          }, 0);\n        });\n      }\n    });\n\n    return promise;\n  };\n\n  finally(callback) {\n    return this.then(\n      (value) => new MyPromise.resolve(callback()).then(() => value),\n      (reason) =>\n        new MyPromise.resolve(callback()).then(() => {\n          throw reason;\n        })\n    );\n  }\n\n  catch(callback) {\n    return this.then(null, callback);\n  }\n\n  static all(array) {\n    // 用于存放最终结果的数组\n    let result = [];\n    // 用于计算当前已经执行完的实例的数量，用于指定当前数据项结果在 result 中的索引位置\n    let count = 0;\n\n    // 返回一个 MyPromise 实例\n    return new MyPromise((resolve, reject) => {\n      function addResult(result, index, value, resolve) {\n        // 根据索引值，将结果推入数组中\n        result[index] = value;\n\n        // 执行完毕一个 count+1，如果当前值等于总长度的话说明已经执行结束了，可以直接调用resolve，说明已经成功执行完毕了\n        if (++count === array.length) {\n          // 将执行结果返回\n          resolve(result);\n        }\n      }\n\n      // 遍历传入的数组\n      array.forEach((item, index) => {\n        // 如果是 MyPromise 实例，则调用 then 方法，获取该实例的值，并将值存入到 result数组的 index 指定索引中\n        if (item instanceof MyPromise) {\n          item.then(\n            (value) => {\n              addResult(result, index, value, resolve);\n            },\n            // 如果失败直接返回失败原因\n            (reason) => {\n              reject(reason);\n            }\n          );\n        } else {\n          addResult(result, index, item, resolve);\n        }\n      });\n    });\n  }\n\n  static resolve(value) {\n    // 如果是MyPromise的实例，就直接返回这个实例\n    if (value instanceof MyPromise) {\n      return value;\n    } else {\n      // 如果不是的话创建一个MyPromise实例，并返回传递的值\n      return new MyPromise((resolve) => resolve(value));\n    }\n  }\n}\n\nfunction resolvePromise(promise, result, resolve, reject) {\n  // 如果 promise 和 then 的返回值是同一个实例的话，需要抛出异常\n  if (promise === result) {\n    // 这里调用reject，并抛出一个Error\n    // return 是必须的，阻止程序向下执行\n    return reject(\n      new TypeError('Chaining cycle detected for promise #<Promise>')\n    );\n  } else {\n    // 判断 result 是不是 MyPromise 实例\n    if (result instanceof MyPromise) {\n      // 如果 result 是 MyPromise 实例的话，需要根据 result 的状态调用 resolve 或者 reject\n      result.then(resolve, reject);\n    } else {\n      resolve(result);\n    }\n  }\n}\n```\n","source":"_posts/promise-detail.md","raw":"---\n# layout: page\ntitle: Promise详解\ndate: 2023-01-31 11:46:20\ncategories: [前端]\ntags: [ES6, Promise]\ntoc: true\n---\n\n## 前言\n\nPromise 是 ES6 异步编程的核心，很多库的异步都从回调向 Promise 转变，Promise 在前端领域发挥着越来越重要的作用；掌握 Promise 的正确使用、理解 Promise 的实现成为了现代前端开发者不可或缺的技能。\n\n<!--\n### Promise 是什么\n\n### Promise 如何使用\n\n### Promise 什么场景|时候使用\n-->\n\n## Promise 的核心原理实现\n\n首先我们从 Promise 的定义和使用方式开始分析 Promise。\n\n### Promise 的使用分析\n\nPromise 是一个类，在执行这个类的时候，需要传递一个执行器参数，执行器会立即执行。\n\n#### Promise 的三个状态\n\n- pending → 等待\n- fulfilled → 成功\n- rejected → 失败\n\n#### 状态切换\n\n- pending → fulfilled\n- pending → rejected\n\n#### 一旦状态发生改变，状态将不可变\n\n- 执行器中的两个参数，分别是 resolve 和 reject，其实就是两个回调函数，调用 resolve 是从 pending 状态转变为 fulfilled 状态，调用 reject 是从 pending 状态转变为 rejected 状态。传递给这两个回调函数的参数会作为成功或失败的值。\n- Promise 实例对象具有一个 then 方法，该方法接受两个回调函数，分别来处理成功与失败的状态，then 方法内部会进行判断，然后根据当前的状态调用对应的回调函数。then 方法应该是被定义在原型对象中的。\n- then 的回调函数中都包含一个值，如果是成功，表示成功后返回的值；如果是失败，就表示失败的原因。\n\n### MyPromise 的实现\n\n根据上述分析，我们可以给出如下实现：\n\n```js\n// 所有状态\nconst PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\n// Promise 本质上是一个类\nclass MyPromise {\n  constructor(executor) {\n    // 实例化Promise时需要一个执行器回调，该回调立即执行\n    executor(this.resolve, this.reject);\n  }\n\n  //   Promise 的初始状态;\n  status = PENDING;\n  // 记录成功与失败的值\n  value = undefined;\n  reason = undefined;\n\n  // 此处使用箭头函数为了解决resolve调用中this的指向问题\n  resolve = (value) => {\n    // 如果状态不是 PENDING 直接跳出该逻辑\n    if (this.status !== PENDING) return;\n    // 将状态修改为 成功\n    this.status = FULFILLED;\n\n    // 将 resolve 回调的参数进行保存\n    this.value = value;\n  };\n\n  reject = (reason) => {\n    if (this.status !== PENDING) return;\n\n    // 将状态修改为失败\n    this.status = REJECTED;\n\n    // 保存失败的原因\n    this.reason = reason;\n  };\n\n  then = (onFulfilled, onRejected) => {\n    // 根据当前状态指定回调\n    if (this.status === FULFILLED) {\n      // 将成功的值作为回调函数的参数返回\n      onFulfilled(this.value);\n    } else if (this.status === REJECTED) {\n      // 将失败的值作为回调函数的参数返回\n      onRejected(this.reason);\n    }\n  };\n}\n```\n\n接下来我们给出一段验证代码：\n\n**验证 resolve**\n\n```js\nconst MyPromise = require('./my-promise');\n\nconst promise = new MyPromise((resolve, reject) => {\n  resolve('Hello Promise Resolve~');\n});\npromise.then(\n  (value) => {\n    console.log(value);\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n\n// Hello Promise Resolve~\n```\n\n**验证 reject**\n\n```js\nconst MyPromise = require('./my-promise');\n\nconst promise = new MyPromise((resolve, reject) => {\n  reject('Hello Promise Reject~');\n});\npromise.then(\n  (value) => {\n    console.log(value);\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n\n// Hello Promise Reject~\n```\n\n**验证状态不可变**\n\n```js\nconst MyPromise = require('./my-promise');\n\nconst promise = new MyPromise((resolve, reject) => {\n  resolve('Hello Promise Resolve~');\n  reject('Hello Promise Reject~');\n});\npromise.then(\n  (value) => {\n    console.log(value);\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n\n// Hello Promise Resolve~\n```\n\n**测试异步**\n\n上述简易版 Promise 中如果存在异步操作将无法正确处理\n\n```js\nconst MyPromise = require('./my-promise');\nconst promise = new MyPromise((resole, reject) => {\n  setTimeout(resolve, 2000, 'Hello Promise Resolve~');\n});\n\npromise.then(\n  (value) => {\n    console.log(value);\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n```\n\n上述代码将不会有任何输出\n\n**原因分析**\n\n- MyPromise 的实现中没有考虑异步的实现，在异步函数中修改 Promise 的状态后没有调用 then 回调\n- then 回调先于 resolve/reject 执行，此时 Promise 的状态还处于 PENDING，将不会执行任何操作[MyPromise 中未对该阶段进行处理]\n\n### 在 Promise 中加入异步操作\n\n根据 `原因分析` 给出如下解决办法：\n\n1. 创建 `onFulfilled` 和 `onRejected` 两个属性用来存储 then 中的回调\n2. 为 `then` 方法添加状态为 `PENDING` 的处理逻辑，及时将 onFulfilled 和 onRejected 回调进行存储，便于在异步方法中调用 resolve/reject 变更状态时及时触发对应的 then 中的回调\n3. 在成功或失败时及时调用对应的 onFulfilled 或者 onRejected 回调\n\n增加异步操作的 Promise 实现如下：\n\n```js\nclass MyPromise {\n  constructor(executor) {\n    // 实例化Promise时需要一个执行器回调，该回调立即执行\n    executor(this.resolve, this.reject);\n  }\n\n  //   Promise 的初始状态;\n  status = PENDING;\n  // 记录成功与失败的值\n  value = undefined;\n  reason = undefined;\n\n  // then中的onFulfilled和onRejected回调\n  onFulfilled = undefined;\n  onRejected = undefined;\n\n  // 此处使用箭头函数为了解决resolve调用中this的指向问题\n  resolve = (value) => {\n    // 如果状态不是 PENDING 直接跳出该逻辑\n    if (this.status !== PENDING) return;\n    // 将状态修改为 成功\n    this.status = FULFILLED;\n\n    // 将 resolve 回调的参数进行保存\n    this.value = value;\n\n    // 如果状态变更为 成功，调用成功的回调\n    this.onFulfilled && this.onFulfilled(this.value);\n  };\n\n  reject = (reason) => {\n    if (this.status !== PENDING) return;\n\n    // 将状态修改为失败\n    this.status = REJECTED;\n\n    // 保存失败的原因\n    this.reason = reason;\n\n    // 如果状态变更为 失败，调用失败的回调\n    this.onRejected && this.onRejected(this.reason);\n  };\n\n  then = (onFulfilled, onRejected) => {\n    // 根据当前状态指定回调\n    if (this.status === FULFILLED) {\n      // 将成功的值作为回调函数的参数返回\n      onFulfilled(this.value);\n    } else if (this.status === REJECTED) {\n      // 将失败的值作为回调函数的参数返回\n      onRejected(this.reason);\n    } else {\n      // 既不是成功也不是失败。这个时候保存传递进来的两个回调，便于 异步操作中 更新 Promise 状态时，触发对应的回调\n      this.onFulfilled = onFulfilled;\n      this.onRejected = onRejected;\n    }\n  };\n}\n```\n\n**验证多次 then 调用**\n\n```js\nconst promise = new MyPromise((resolve) => {\n  setTimeout(resolve, 2000, 'Hello Promise Resolve~');\n});\npromise.then(\n  (value) => {\n    console.log(value + ' first.');\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\npromise.then(\n  (value) => {\n    console.log(value + ' second.');\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\npromise.then(\n  (value) => {\n    setTimeout(() => {\n      console.log(value + ' third.');\n    }, 1000);\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n// 3s后输出： Hello Promise Resolve~ third.\n```\n\n**原因分析**\n\n如果执行器中存在**异步逻辑**，`then 函数又先于 异步逻辑 执行`，导致多次 `then` 调用存在覆盖 bug，即在后面的 then 调用会覆盖前面的 `then` 回调\n\n### 实现 then 方法的多次调用\n\n根据 `原因分析` 给出如下解决方案：\n\n1. 将保存 `then` 回调的 onFulfilled 和 onRejected 属性改为数组形式，便于存储多个 `then` 回调.\n\n增加存储多次 then 回调的实现如下：\n\n```js\n/**\n * 定义所有状态常量\n */\nconst PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\n/**\n * Promise是一个类\n */\nclass MyPromise {\n  constructor(executor) {\n    executor(this.resolve, this.reject);\n  }\n\n  status = PENDING;\n  value = undefined;\n  reason = undefined;\n\n  onFulfilled = [];\n  onRejected = [];\n\n  resolve = (value) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = FULFILLED;\n    this.value = value;\n\n    while (this.onFulfilled.length) {\n      this.onFulfilled.shift()(this.value);\n    }\n  };\n\n  reject = (reason) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = REJECTED;\n    this.reason = reason;\n\n    while (this.onRejected.length) {\n      this.onRejected.shift()(this.reason);\n    }\n  };\n\n  then = (onFulfilled, onRejected) => {\n    if (this.status === FULFILLED) {\n      onFulfilled(this.value);\n    }\n\n    if (this.status === REJECTED) {\n      onRejected(this.reason);\n    }\n\n    if (this.status === PENDING) {\n      // 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调\n      this.onFulfilled.push(onFulfilled);\n      this.onRejected.push(onRejected);\n    }\n  };\n}\n```\n\n**验证多次 then 调用**\n\n```js\nconst promise = new MyPromise((resolve) => {\n  resolve('Hello Promise Resolve~');\n});\npromise.then(\n  (value) => {\n    console.log(value + ' first.');\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\npromise.then(\n  (value) => {\n    console.log(value + ' second.');\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\npromise.then(\n  (value) => {\n    setTimeout(() => {\n      console.log(value + ' third.');\n    }, 1000);\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n// 输出\n// 立即输出：\n// Hello Promise Resolve~ first.\n// Hello Promise Resolve~ second.\n// 1s后输出\n// Hello Promise Resolve~ third.\n\nconst promise = new MyPromise((resolve) => {\n  setTimeout(resolve, 2000, 'Hello Promise Resolve~');\n});\npromise.then(\n  (value) => {\n    console.log(value + ' first.');\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\npromise.then(\n  (value) => {\n    console.log(value + ' second.');\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\npromise.then(\n  (value) => {\n    setTimeout(() => {\n      console.log(value + ' third.');\n    }, 1000);\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n// 输出\n// 2s后输出：\n// Hello Promise Resolve~ first.\n// Hello Promise Resolve~ second.\n// 3s后输出\n// Hello Promise Resolve~ third.\n```\n\n### <text style=\"color: red;\">实现 then 方法的链式调用[难点]</text>\n\n**要想实现 then 的链式调用，主要需要解决两个问题：**\n\n1. 返回的是一个新的 `MyPromise` 的实例；\n2. `then` 的返回值作为下一次的链式调用的参数。\n\n**这里分为两种情况：**\n\n1. 直接返回一个值，可以直接作为值使用；\n2. 返回一个新的 `MyPromise` 实例，此时就需要判断其状态；\n\n**代码实现**：\n\n```js\n/**\n * 定义所有状态常量\n */\nconst PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\n/**\n * Promise是一个类\n */\nclass MyPromise {\n  constructor(executor) {\n    executor(this.resolve, this.reject);\n  }\n\n  status = PENDING;\n  value = undefined;\n  reason = undefined;\n\n  onFulfilled = [];\n  onRejected = [];\n\n  resolve = (value) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = FULFILLED;\n    this.value = value;\n\n    while (this.onFulfilled.length) {\n      this.onFulfilled.shift()(this.value);\n    }\n  };\n\n  reject = (reason) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = REJECTED;\n    this.reason = reason;\n\n    while (this.onRejected.length) {\n      this.onRejected.shift()(this.reason);\n    }\n  };\n\n  then = (onFulfilled, onRejected) => {\n    // then 方法返回一个 MyPromise 实例\n    return new MyPromise((resolve, reject) => {\n      if (this.status === FULFILLED) {\n        const result = onFulfilled(this.value);\n\n        // 如果result是一个普通值，直接resolve(result)\n        // 如果是一个 MyPromise 实例，根据返回的解决来决定时调用 resolve 还是 reject\n        resolvePromise(result, resolve, reject);\n      }\n\n      if (this.status === REJECTED) {\n        onRejected(this.reason);\n      }\n\n      if (this.status === PENDING) {\n        // 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调\n        this.onFulfilled.push(onFulfilled);\n        this.onRejected.push(onRejected);\n      }\n    });\n  };\n}\n\nfunction resolvePromise(result, resolve, reject) {\n  if (result instanceof MyPromise) {\n    result.then(resolve, reject);\n  } else {\n    resolve(result);\n  }\n}\n```\n\n**验证链式调用**\n\n```js\nconst promise1 = new MyPromise((resolve) => {\n  resolve('Hello Promise Resolve~');\n});\nconst promise2 = promise1.then(\n  (value) => {\n    console.log(value + ' promise1.');\n    // 当前 Promise 的 resolve 回调函数的返回值将作为下一个链式调用的 then 中的 onFulfilled 回调函数的参数值\n    return 'Hello Promise2 Resolve~';\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n\npromise2.then(\n  // 此处的 value 即为 'Hello Promise2 Resolve~'\n  (value) => {\n    console.log(value + ` promise2.`);\n  },\n  (reason) => {\n    console.log(reason + ` promise2.`);\n  }\n);\n\n// 输出：\n// Hello Promise Resolve~ promise1.\n// Hello Promise2 Resolve~ promise2.\n```\n\n### then 方法链式调用识别 Promise 对象自返回 [难点]\n\n在 Promise 中，如果 `then` 方法返回的是自己的 `Promise` 对象，则会发生 `Promise` 的嵌套，这个时候程序会报错。\n\n**测试代码**\n\n```js\nconst p1 = new Promise((resolve, reject) => {\n  resolve(12);\n});\nconst p2 = p1.then((v) => {\n  console.log(v);\n  return p2;\n});\np2.then((v) => console.log(v));\n\n// 输出：\n// 12\n// Promise {<rejected>: TypeError: Chaining cycle detected for promise #<Promise>}\n// Uncaught (in promise) TypeError: Chaining cycle detected for promise #<Promise>\n```\n\n**解决办法**\n\n只需判断 `then` 返回的 Promise 实例与 then 中回调函数返回的实例是否是同一个即可，如果是引用的同一个实例，那么就抛出错误\n\n**实现代码**\n\n```js\n/**\n * 定义所有状态常量\n */\nconst PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\n/**\n * Promise是一个类\n */\nclass MyPromise {\n  constructor(executor) {\n    executor(this.resolve, this.reject);\n  }\n\n  status = PENDING;\n  value = undefined;\n  reason = undefined;\n\n  onFulfilled = [];\n  onRejected = [];\n\n  resolve = (value) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = FULFILLED;\n    this.value = value;\n\n    while (this.onFulfilled.length) {\n      this.onFulfilled.shift()(this.value);\n    }\n  };\n\n  reject = (reason) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = REJECTED;\n    this.reason = reason;\n\n    while (this.onRejected.length) {\n      this.onRejected.shift()(this.reason);\n    }\n  };\n\n  then = (onFulfilled, onRejected) => {\n    // then 方法返回一个 MyPromise 实例\n    const promise = new MyPromise((resolve, reject) => {\n      if (this.status === FULFILLED) {\n        // 如果不用异步是拿不到 then 中生成的新 Promise 实例的\n        setTimeout(() => {\n          const result = onFulfilled(this.value);\n\n          resolvePromise(promise, result, resolve, reject);\n        }, 0);\n      }\n\n      if (this.status === REJECTED) {\n        onRejected(this.reason);\n      }\n\n      if (this.status === PENDING) {\n        // 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调\n        this.onFulfilled.push(onFulfilled);\n        this.onRejected.push(onRejected);\n      }\n    });\n\n    return promise;\n  };\n}\n\nfunction resolvePromise(promise, result, resolve, reject) {\n  // 如果 promise 和 then 的返回值是同一个实例的话，需要抛出异常\n  if (promise === result) {\n    // 这里调用reject，并抛出一个Error\n    // return 是必须的，阻止程序向下执行\n    return reject(\n      new TypeError('Chaining cycle detected for promise #<Promise>')\n    );\n  } else {\n    // 判断 result 是不是 MyPromise 实例\n    if (result instanceof MyPromise) {\n      // 如果 result 是 MyPromise 实例的话，需要根据 result 的状态调用 resolve 或者 reject\n      result.then(resolve, reject);\n    } else {\n      resolve(result);\n    }\n  }\n}\n```\n\n> 这里 then 方法中的 setTimeout 的作用并不是延迟执行，而是为了调用 resolvePromise 函数时，保证创建的 promise 存在。\n\n**验证代码**\n\n```js\nconst promise1 = new MyPromise((resolve) => {\n  resolve('Hello Promise Resolve~');\n});\nconst promise2 = promise1.then(\n  (value) => {\n    console.log(value + ' promise1.');\n    return promise2;\n  },\n  (reason) => {\n    console.log(reason);\n  }\n);\n\npromise2.then(\n  (value) => {\n    console.log(value + ` promise2.`);\n  },\n  (reason) => {\n    console.log(reason + ` promise2.`);\n  }\n);\n// 输出：\n// Hello Promise Resolve~ promise1.\n// TypeError: Chaining cycle detected for promise #<Promise> promise2.\n```\n\n## 捕捉错误及 then 链式调用其他状态代码补充\n\n到目前为止我们实现的 Promise 并没有对异常做任何处理，为了保证代码的健壮性，我们需要对异常做一些处理。\n\n### 捕捉执行器报错\n\n如果执行器函数在执行过程中发生了异常，需要捕获异常并且在捕获逻辑中调用 reject 将异常传出去\n\n**关键实现代码**\n\n```js\nconstructor(executor) {\n  try {\n    executor(this.resolve, this.reject);\n  } catch (error) {\n    this.reject(error);\n  }\n}\n```\n\n**测试代码**\n\n```js\nconst promise1 = new MyPromise((resolve) => {\n  throw new Error('执行器异常');\n});\npromise1.then(console.log, console.log);\n\n// 输出：\n// Error: 执行器异常\n//     at E:\\blog\\source\\_posts\\my-promise.js:100:11\n//     at new MyPromise (E:\\blog\\source\\_posts\\my-promise.js:14:13)\n//     at Object.<anonymous> (E:\\blog\\source\\_posts\\my-promise.js:99:18)\n//     at Module._compile (node:internal/modules/cjs/loader:1126:14)\n//     at Object.Module._extensions..js (node:internal/modules/cjs/loader:1180:10)\n//     at Module.load (node:internal/modules/cjs/loader:1004:32)\n//     at Function.Module._load (node:internal/modules/cjs/loader:839:12)\n//     at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n//     at node:internal/main/run_main_module:17:47\n```\n\n### 捕捉 then 中的报错\n\n如果需要捕获 `then` 中的异常，与执行器中同理，需要在 then 中将捕获到的异常通过 reject 传递出去，异常需要通过 `try...catch` 捕获。\n\n**关键实现代码**\n\n```js\nthen = (onFulfilled, onRejected) => {\n  // then 方法返回一个 MyPromise 实例\n  const promise = new MyPromise((resolve, reject) => {\n    if (this.status === FULFILLED) {\n      // 如果不用异步是拿不到 then 中生成的新 Promise 实例的\n      setTimeout(() => {\n        try {\n          // 将成功的值作为参数返回\n          // 保存执行回调函数的结果\n          const result = onFulfilled(this.value);\n\n          // 如果返回的是一个普通的值，直接调用resolve\n          // 如果是一个MyPromise实例，根据返回的promise实例状态来决定是调用resolve，还是reject\n          resolvePromise(promise, result, resolve, reject);\n        } catch (error) {\n          reject(error);\n        }\n      }, 0);\n    }\n\n    // 将失败的原因作为参数返回\n    if (this.status === REJECTED) {\n      onRejected(this.reason);\n    }\n\n    if (this.status === PENDING) {\n      // 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调\n      this.onFulfilled.push(onFulfilled);\n      this.onRejected.push(onRejected);\n    }\n  });\n\n  return promise;\n};\n```\n\n**测试代码**\n\n```js\nconst promise1 = new MyPromise((resolve) => {\n  resolve(Math.PI);\n});\npromise1\n  .then((pi) => console.log(2 * pi * r), console.log)\n  .then(console.log, console.log);\n\n// 输出：\n// ReferenceError: r is not defined\n//     at E:\\blog\\source\\_posts\\my-promise.js:112:40\n//     at Timeout._onTimeout (E:\\blog\\source\\_posts\\my-promise.js:64:40)\n//     at listOnTimeout (node:internal/timers:559:17)\n//     at processTimers (node:internal/timers:502:7)\n```\n\n### 错误与异步状态的链式调用\n\n目前只对成功状态的 then 进行了链式调用以及错误处理，错误与异步状态未进行处理，参照成功状态下的错误处理进行实现\n\n**关键实现代码**\n\n```js\nthen = (onFulfilled, onRejected) => {\n  // then 方法返回一个 MyPromise 实例\n  const promise = new MyPromise((resolve, reject) => {\n    if (this.status === FULFILLED) {\n      // 如果不用异步是拿不到 then 中生成的新 Promise 实例的\n      setTimeout(() => {\n        try {\n          // 将成功的值作为参数返回\n          // 保存执行回调函数的结果\n          const result = onFulfilled(this.value);\n\n          // 如果返回的是一个普通的值，直接调用resolve\n          // 如果是一个MyPromise实例，根据返回的promise实例状态来决定是调用resolve，还是reject\n          resolvePromise(promise, result, resolve, reject);\n        } catch (error) {\n          reject(error);\n        }\n      }, 0);\n    }\n\n    // 将失败的原因作为参数返回\n    if (this.status === REJECTED) {\n      // 失败的处理同成功处理，只是调用的回调函数不同\n      setTimeout(() => {\n        try {\n          const result = onRejected(this.reason);\n          resolvePromise(promise, result, resolve, reject);\n        } catch (error) {\n          reject(error);\n        }\n      }, 0);\n    }\n\n    if (this.status === PENDING) {\n      // 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调\n      this.onFulfilled.push((value) => {\n        setTimeout(() => {\n          try {\n            const result = onFulfilled(value);\n            resolvePromise(promise, result, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        }, 0);\n      });\n      this.onRejected.push((reason) => {\n        setTimeout(() => {\n          try {\n            const result = onRejected(reason);\n            resolvePromise(promise, result, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        }, 0);\n      });\n    }\n  });\n\n  return promise;\n};\n```\n\n**测试代码**\n\n```js\nconst MyPromise = require('./myPromise');\nlet promise = new MyPromise((resolve, reject) => {\n  setTimeout(resolve, 2000, '成功');\n});\n// 第一个then方法中的错误要在第二个then方法中捕获到\npromise\n  .then((value) => {\n    console.log('resolve', value);\n    throw new Error('then的执行过程中遇到异常');\n  })\n  .then(null, (reason) => {\n    console.log(reason.message);\n  });\n/* 输出\n    resolve 成功\n    then的执行过程中遇到异常\n*/\n```\n\n## 将 then 方法的参数变成可选参数\n\nPromise 中的 then 方法其实是两个*可选参数*，如果我们不传递任何参数的话，里面的结果是向下传递的，直到捕获为止。\n\n**示例代码**\n\n```js\nnew Promise((resolve, reject) => {\n  resolve(100);\n})\n  .then()\n  .then()\n  .then()\n  .then((value) => console.log(value));\n// 最后一个then输入100\n```\n\n**这段代码可以理解为**\n\n```js\nnew Promise((resolve, reject) => {\n  resolve(100);\n})\n  .then((value) => value)\n  .then((value) => value)\n  .then((value) => value)\n  .then((value) => console.log(value));\n```\n\n**关键实现**\n\n```js\n// then方法的实现\nthen (onFulfilled, onRejected) {\n    // 如果传递函数，就是用传递的函数，否则指定一个默认值，用于参数传递\n    onFulfilled = onFulfilled ? onFulfilled : value => value\n    // 同理\n    onRejected = onRejected ? onRejected : reason => { throw reason }\n    // then 方法返回一个MyPromise实例\n    const promise = new MyPromise((resolve, reject) => {\n        // 判断当前状态,根据状态调用指定回调\n        if (this.status === FULFILLED) {...\n        } else if (this.status === REJECTED) {...\n        } else {...\n        }\n    })\n    return promise\n}\n```\n\n## Promise.all 方法的实现\n\n简单的说 `Promise.all()` 会将多个 Promise 实例包装为一个 Promise 实例，且顺序与调用顺序一致:\n**示例代码**\n\n```js\nfunction p1() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('p1');\n    }, 2000);\n  });\n}\nfunction p2() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('p2');\n    }, 0);\n  });\n}\nPromise.all(['a', 'b', p1(), p2(), 'c']).then((result) => {\n  console.log(result);\n  // [\"a\", \"b\", \"p1\", \"p2\", \"c\"]\n});\n```\n\n在这段代码中，我们的 p1 的执行是延迟了 2s 的，这里如果不使用 Promise.all()的话最终顺序是与我们调用不同的。\n\n**分析 Promise.all 的实现思路**\n\n- `all()` 方法是通过类直接调用的，所以是一个静态方法\n- `all()` 方法接收一个数组，数组中的值可以是一个普通值，也可以是一个 MyPromise 实例\n- return 一个新的 MyPromise 实例\n- 遍历数组中的每一个值，判断值的类型，如果是一个普通值就直接将值存入一个结果数组；如果是一个 MyPromise 实例对象，会调用其 then 方法，然后根据执行后的状态，如果失败的话调用 MyPromise 的 reject 方法，如果成功的话将值存入结果数组；\n- 存入数组时计数，如果存入的数量达到传入的数组长度，说明调用完毕，执行 `resolve` 并将最终的结果数组作为参数返回。\n\n**关键实现**\n\n```js\nMyPromise.all = (array) => {\n  // 用于存放最终结果的数组\n  let result = [];\n  // 用于计算当前已经执行完的实例的数量，用于指定当前数据项结果在 result 中的索引位置\n  let count = 0;\n\n  // 返回一个 MyPromise 实例\n  return new MyPromise((resolve, reject) => {\n    function addResult(result, index, value, resolve) {\n      // 根据索引值，将结果推入数组中\n      result[index] = value;\n\n      // 执行完毕一个 count+1，如果当前值等于总长度的话说明已经执行结束了，可以直接调用resolve，说明已经成功执行完毕了\n      if (++count === array.length) {\n        // 将执行结果返回\n        resolve(result);\n      }\n    }\n\n    // 遍历传入的数组\n    array.forEach((item, index) => {\n      // 如果是 MyPromise 实例，则调用 then 方法，获取该实例的值，并将值存入到 result数组的 index 指定索引中\n      if (item instanceof MyPromise) {\n        item.then(\n          (value) => {\n            addResult(result, index, value, resolve);\n          },\n          // 如果失败直接返回失败原因\n          (reason) => {\n            reject(reason);\n          }\n        );\n      } else {\n        addResult(result, index, item, resolve);\n      }\n    });\n  });\n};\n```\n\n**测试示例**\n\n```js\nfunction p1() {\n  return new MyPromise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('p1');\n    }, 2000);\n  });\n}\nfunction p2() {\n  return new MyPromise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('p2');\n    }, 0);\n  });\n}\nMyPromise.all(['a', 'b', p1(), p2(), 'c']).then((result) => {\n  console.log(result);\n  // [\"a\", \"b\", \"p1\", \"p2\", \"c\"]\n});\n```\n\n## Promise.resolve 方法的实现\n\n关于 Promise.resolve()方法的用法可以参考 Promise.resolve()与 Promise.reject()。\n**直线思路分析**\n\n- 该方法是一个静态方法\n- 该方法接收的如果是一个值就直接将该值包装为一个 MyPromise 实例对象返回,如果是一个 MyPromise 实例对象,则直接返回\n\n**关键实现**\n\n```js\nMyPromise.resolve = (value) => {\n  // 如果是MyPromise的实例，就直接返回这个实例\n  if (value instanceof MyPromise) {\n    return value;\n  } else {\n    // 如果不是的话创建一个MyPromise实例，并返回传递的值\n    return new MyPromise((resolve) => resolve(value));\n  }\n};\n```\n\n**测试代码**\n\n```js\nfunction p1() {\n  return new MyPromise((resolve, reject) => {\n    reject('p1');\n  });\n}\nfunction p2() {\n  return new MyPromise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('p2');\n    }, 2000);\n  });\n}\nMyPromise.resolve(p1()).then(console.log, console.log);\nMyPromise.resolve(3.1415926).then(console.log);\nMyPromise.resolve(p2()).then(console.log, console.log);\n// 输出\n// p1\n// 3.1415926\n// 2s后输出\n// p2\n```\n\n## finally 方法的实现\n\n**实现思路分析**\n\n- 不管 Promise 是 Fulfilled 还是 Rejected 状态,都会调用 finally 函数中的回调参数\n- 返回一个新的 Promise 实例\n\n**关键实现**\n\n```js\nfinally(callback) {\n    return this.then(\n        value => new MyPromise.resolve(callback()).then(() => value),\n        reason => new MyPromise.resolve(callback()).then(() => { throw reason })\n    );\n}\n```\n\n**测试代码**\n\n```js\nfunction p1() {\n  return new MyPromise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('p1');\n    }, 2000);\n  });\n}\nfunction p2() {\n  return new MyPromise((resolve, reject) => {\n    reject('p2 reject');\n  });\n}\np2()\n  .finally(() => {\n    console.log('finally p2');\n    return p1();\n  })\n  .then(\n    (value) => {\n      console.log(value);\n    },\n    (reason) => {\n      console.log(reason);\n    }\n  );\n// finally p2\n// 两秒之后执行p2 reject\n```\n\n## catch 方法的实现\n\n关于 catch 方法可以参考 catch()，实现该方法其实非常简单，只需要在内部调用 then 方法，不传递第一个回调函数即可\n\n**关键实现**\n\n```js\ncatch(callback) {\n    return this.then(null, callback);\n}\n```\n\n**测试代码**\n\n```js\nfunction p() {\n  return new MyPromise((resolve, reject) => {\n    reject(new Error('reject'));\n  });\n}\np()\n  .then((value) => {\n    console.log(value);\n  })\n  .catch((reason) => console.log(reason));\n// 输出\n// Error: reject\n```\n\n## 完整代码\n\n```js\n/**\n * 定义所有状态常量\n */\nconst PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\n/**\n * Promise是一个类\n */\nclass MyPromise {\n  constructor(executor) {\n    try {\n      executor(this.resolve, this.reject);\n    } catch (error) {\n      this.reject(error);\n    }\n  }\n\n  status = PENDING;\n  value = undefined;\n  reason = undefined;\n\n  onFulfilled = [];\n  onRejected = [];\n\n  resolve = (value) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = FULFILLED;\n    this.value = value;\n\n    while (this.onFulfilled.length) {\n      this.onFulfilled.shift()(this.value);\n    }\n  };\n\n  reject = (reason) => {\n    if (this.status !== PENDING) {\n      return;\n    }\n\n    this.status = REJECTED;\n    this.reason = reason;\n\n    while (this.onRejected.length) {\n      this.onRejected.shift()(this.reason);\n    }\n  };\n\n  then = (onFulfilled, onRejected) => {\n    // 如果传递函数，就是用传递的函数，否则指定一个默认值，用于参数传递\n    onFulfilled = onFulfilled ? onFulfilled : (value) => value;\n    // 同理\n    onRejected = onRejected\n      ? onRejected\n      : (reason) => {\n          throw reason;\n        };\n\n    // then 方法返回一个 MyPromise 实例\n    const promise = new MyPromise((resolve, reject) => {\n      if (this.status === FULFILLED) {\n        // 如果不用异步是拿不到 then 中生成的新 Promise 实例的\n        setTimeout(() => {\n          try {\n            // 将成功的值作为参数返回\n            // 保存执行回调函数的结果\n            const result = onFulfilled(this.value);\n\n            // 如果返回的是一个普通的值，直接调用resolve\n            // 如果是一个MyPromise实例，根据返回的promise实例状态来决定是调用resolve，还是reject\n            resolvePromise(promise, result, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        }, 0);\n      }\n\n      // 将失败的原因作为参数返回\n      if (this.status === REJECTED) {\n        // 失败的处理同成功处理，只是调用的回调函数不同\n        setTimeout(() => {\n          try {\n            const result = onRejected(this.reason);\n            resolvePromise(promise, result, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        }, 0);\n      }\n\n      if (this.status === PENDING) {\n        // 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调\n        this.onFulfilled.push((value) => {\n          setTimeout(() => {\n            try {\n              const result = onFulfilled(value);\n              resolvePromise(promise, result, resolve, reject);\n            } catch (error) {\n              reject(error);\n            }\n          }, 0);\n        });\n        this.onRejected.push((reason) => {\n          setTimeout(() => {\n            try {\n              const result = onRejected(reason);\n              resolvePromise(promise, result, resolve, reject);\n            } catch (error) {\n              reject(error);\n            }\n          }, 0);\n        });\n      }\n    });\n\n    return promise;\n  };\n\n  finally(callback) {\n    return this.then(\n      (value) => new MyPromise.resolve(callback()).then(() => value),\n      (reason) =>\n        new MyPromise.resolve(callback()).then(() => {\n          throw reason;\n        })\n    );\n  }\n\n  catch(callback) {\n    return this.then(null, callback);\n  }\n\n  static all(array) {\n    // 用于存放最终结果的数组\n    let result = [];\n    // 用于计算当前已经执行完的实例的数量，用于指定当前数据项结果在 result 中的索引位置\n    let count = 0;\n\n    // 返回一个 MyPromise 实例\n    return new MyPromise((resolve, reject) => {\n      function addResult(result, index, value, resolve) {\n        // 根据索引值，将结果推入数组中\n        result[index] = value;\n\n        // 执行完毕一个 count+1，如果当前值等于总长度的话说明已经执行结束了，可以直接调用resolve，说明已经成功执行完毕了\n        if (++count === array.length) {\n          // 将执行结果返回\n          resolve(result);\n        }\n      }\n\n      // 遍历传入的数组\n      array.forEach((item, index) => {\n        // 如果是 MyPromise 实例，则调用 then 方法，获取该实例的值，并将值存入到 result数组的 index 指定索引中\n        if (item instanceof MyPromise) {\n          item.then(\n            (value) => {\n              addResult(result, index, value, resolve);\n            },\n            // 如果失败直接返回失败原因\n            (reason) => {\n              reject(reason);\n            }\n          );\n        } else {\n          addResult(result, index, item, resolve);\n        }\n      });\n    });\n  }\n\n  static resolve(value) {\n    // 如果是MyPromise的实例，就直接返回这个实例\n    if (value instanceof MyPromise) {\n      return value;\n    } else {\n      // 如果不是的话创建一个MyPromise实例，并返回传递的值\n      return new MyPromise((resolve) => resolve(value));\n    }\n  }\n}\n\nfunction resolvePromise(promise, result, resolve, reject) {\n  // 如果 promise 和 then 的返回值是同一个实例的话，需要抛出异常\n  if (promise === result) {\n    // 这里调用reject，并抛出一个Error\n    // return 是必须的，阻止程序向下执行\n    return reject(\n      new TypeError('Chaining cycle detected for promise #<Promise>')\n    );\n  } else {\n    // 判断 result 是不是 MyPromise 实例\n    if (result instanceof MyPromise) {\n      // 如果 result 是 MyPromise 实例的话，需要根据 result 的状态调用 resolve 或者 reject\n      result.then(resolve, reject);\n    } else {\n      resolve(result);\n    }\n  }\n}\n```\n","slug":"promise-detail","published":1,"updated":"2023-06-28T09:32:50.978Z","_id":"cldjvf8a1000e70v467h06sti","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Promise 是 ES6 异步编程的核心，很多库的异步都从回调向 Promise 转变，Promise 在前端领域发挥着越来越重要的作用；掌握 Promise 的正确使用、理解 Promise 的实现成为了现代前端开发者不可或缺的技能。</p>\n<!--\n### Promise 是什么\n\n### Promise 如何使用\n\n### Promise 什么场景|时候使用\n-->\n\n<h2 id=\"Promise-的核心原理实现\"><a href=\"#Promise-的核心原理实现\" class=\"headerlink\" title=\"Promise 的核心原理实现\"></a>Promise 的核心原理实现</h2><p>首先我们从 Promise 的定义和使用方式开始分析 Promise。</p>\n<h3 id=\"Promise-的使用分析\"><a href=\"#Promise-的使用分析\" class=\"headerlink\" title=\"Promise 的使用分析\"></a>Promise 的使用分析</h3><p>Promise 是一个类，在执行这个类的时候，需要传递一个执行器参数，执行器会立即执行。</p>\n<h4 id=\"Promise-的三个状态\"><a href=\"#Promise-的三个状态\" class=\"headerlink\" title=\"Promise 的三个状态\"></a>Promise 的三个状态</h4><ul>\n<li>pending → 等待</li>\n<li>fulfilled → 成功</li>\n<li>rejected → 失败</li>\n</ul>\n<h4 id=\"状态切换\"><a href=\"#状态切换\" class=\"headerlink\" title=\"状态切换\"></a>状态切换</h4><ul>\n<li>pending → fulfilled</li>\n<li>pending → rejected</li>\n</ul>\n<h4 id=\"一旦状态发生改变，状态将不可变\"><a href=\"#一旦状态发生改变，状态将不可变\" class=\"headerlink\" title=\"一旦状态发生改变，状态将不可变\"></a>一旦状态发生改变，状态将不可变</h4><ul>\n<li>执行器中的两个参数，分别是 resolve 和 reject，其实就是两个回调函数，调用 resolve 是从 pending 状态转变为 fulfilled 状态，调用 reject 是从 pending 状态转变为 rejected 状态。传递给这两个回调函数的参数会作为成功或失败的值。</li>\n<li>Promise 实例对象具有一个 then 方法，该方法接受两个回调函数，分别来处理成功与失败的状态，then 方法内部会进行判断，然后根据当前的状态调用对应的回调函数。then 方法应该是被定义在原型对象中的。</li>\n<li>then 的回调函数中都包含一个值，如果是成功，表示成功后返回的值；如果是失败，就表示失败的原因。</li>\n</ul>\n<h3 id=\"MyPromise-的实现\"><a href=\"#MyPromise-的实现\" class=\"headerlink\" title=\"MyPromise 的实现\"></a>MyPromise 的实现</h3><p>根据上述分析，我们可以给出如下实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 所有状态</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Promise 本质上是一个类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化Promise时需要一个执行器回调，该回调立即执行</span></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//   Promise 的初始状态;</span></span><br><span class=\"line\">  status = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 记录成功与失败的值</span></span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此处使用箭头函数为了解决resolve调用中this的指向问题</span></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果状态不是 PENDING 直接跳出该逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将状态修改为 成功</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 resolve 回调的参数进行保存</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将状态修改为失败</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存失败的原因</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据当前状态指定回调</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将成功的值作为回调函数的参数返回</span></span><br><span class=\"line\">      <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将失败的值作为回调函数的参数返回</span></span><br><span class=\"line\">      <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们给出一段验证代码：</p>\n<p><strong>验证 resolve</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyPromise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./my-promise&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>验证 reject</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyPromise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./my-promise&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;Hello Promise Reject~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Reject~</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>验证状态不可变</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyPromise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./my-promise&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;Hello Promise Reject~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>测试异步</strong></p>\n<p>上述简易版 Promise 中如果存在异步操作将无法正确处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyPromise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./my-promise&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resole, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">2000</span>, <span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>上述代码将不会有任何输出</p>\n<p><strong>原因分析</strong></p>\n<ul>\n<li>MyPromise 的实现中没有考虑异步的实现，在异步函数中修改 Promise 的状态后没有调用 then 回调</li>\n<li>then 回调先于 resolve&#x2F;reject 执行，此时 Promise 的状态还处于 PENDING，将不会执行任何操作[MyPromise 中未对该阶段进行处理]</li>\n</ul>\n<h3 id=\"在-Promise-中加入异步操作\"><a href=\"#在-Promise-中加入异步操作\" class=\"headerlink\" title=\"在 Promise 中加入异步操作\"></a>在 Promise 中加入异步操作</h3><p>根据 <code>原因分析</code> 给出如下解决办法：</p>\n<ol>\n<li>创建 <code>onFulfilled</code> 和 <code>onRejected</code> 两个属性用来存储 then 中的回调</li>\n<li>为 <code>then</code> 方法添加状态为 <code>PENDING</code> 的处理逻辑，及时将 onFulfilled 和 onRejected 回调进行存储，便于在异步方法中调用 resolve&#x2F;reject 变更状态时及时触发对应的 then 中的回调</li>\n<li>在成功或失败时及时调用对应的 onFulfilled 或者 onRejected 回调</li>\n</ol>\n<p>增加异步操作的 Promise 实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化Promise时需要一个执行器回调，该回调立即执行</span></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//   Promise 的初始状态;</span></span><br><span class=\"line\">  status = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 记录成功与失败的值</span></span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// then中的onFulfilled和onRejected回调</span></span><br><span class=\"line\">  onFulfilled = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  onRejected = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此处使用箭头函数为了解决resolve调用中this的指向问题</span></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果状态不是 PENDING 直接跳出该逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将状态修改为 成功</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 resolve 回调的参数进行保存</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果状态变更为 成功，调用成功的回调</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将状态修改为失败</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存失败的原因</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果状态变更为 失败，调用失败的回调</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据当前状态指定回调</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将成功的值作为回调函数的参数返回</span></span><br><span class=\"line\">      <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将失败的值作为回调函数的参数返回</span></span><br><span class=\"line\">      <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 既不是成功也不是失败。这个时候保存传递进来的两个回调，便于 异步操作中 更新 Promise 状态时，触发对应的回调</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span> = onFulfilled;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span> = onRejected;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>验证多次 then 调用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">2000</span>, <span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; first.&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; second.&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; third.&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 3s后输出： Hello Promise Resolve~ third.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>原因分析</strong></p>\n<p>如果执行器中存在<strong>异步逻辑</strong>，<code>then 函数又先于 异步逻辑 执行</code>，导致多次 <code>then</code> 调用存在覆盖 bug，即在后面的 then 调用会覆盖前面的 <code>then</code> 回调</p>\n<h3 id=\"实现-then-方法的多次调用\"><a href=\"#实现-then-方法的多次调用\" class=\"headerlink\" title=\"实现 then 方法的多次调用\"></a>实现 then 方法的多次调用</h3><p>根据 <code>原因分析</code> 给出如下解决方案：</p>\n<ol>\n<li>将保存 <code>then</code> 回调的 onFulfilled 和 onRejected 属性改为数组形式，便于存储多个 <code>then</code> 回调.</li>\n</ol>\n<p>增加存储多次 then 回调的实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义所有状态常量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Promise是一个类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  status = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  onFulfilled = [];</span><br><span class=\"line\">  onRejected = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">push</span>(onFulfilled);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">push</span>(onRejected);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>验证多次 then 调用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; first.&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; second.&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; third.&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// 立即输出：</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ first.</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ second.</span></span><br><span class=\"line\"><span class=\"comment\">// 1s后输出</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ third.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">2000</span>, <span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; first.&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; second.&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; third.&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// 2s后输出：</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ first.</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ second.</span></span><br><span class=\"line\"><span class=\"comment\">// 3s后输出</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ third.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现-then-方法的链式调用-难点\"><a href=\"#实现-then-方法的链式调用-难点\" class=\"headerlink\" title=\"实现 then 方法的链式调用[难点]\"></a><text style=\"color: red;\">实现 then 方法的链式调用[难点]</text></h3><p><strong>要想实现 then 的链式调用，主要需要解决两个问题：</strong></p>\n<ol>\n<li>返回的是一个新的 <code>MyPromise</code> 的实例；</li>\n<li><code>then</code> 的返回值作为下一次的链式调用的参数。</li>\n</ol>\n<p><strong>这里分为两种情况：</strong></p>\n<ol>\n<li>直接返回一个值，可以直接作为值使用；</li>\n<li>返回一个新的 <code>MyPromise</code> 实例，此时就需要判断其状态；</li>\n</ol>\n<p><strong>代码实现</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义所有状态常量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Promise是一个类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  status = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  onFulfilled = [];</span><br><span class=\"line\">  onRejected = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then 方法返回一个 MyPromise 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果result是一个普通值，直接resolve(result)</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果是一个 MyPromise 实例，根据返回的解决来决定时调用 resolve 还是 reject</span></span><br><span class=\"line\">        <span class=\"title function_\">resolvePromise</span>(result, resolve, reject);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">push</span>(onFulfilled);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">push</span>(onRejected);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolvePromise</span>(<span class=\"params\">result, resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">    result.<span class=\"title function_\">then</span>(resolve, reject);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>验证链式调用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise2 = promise1.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; promise1.&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 当前 Promise 的 resolve 回调函数的返回值将作为下一个链式调用的 then 中的 onFulfilled 回调函数的参数值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello Promise2 Resolve~&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">promise2.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"comment\">// 此处的 value 即为 &#x27;Hello Promise2 Resolve~&#x27;</span></span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">` promise2.`</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason + <span class=\"string\">` promise2.`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ promise1.</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise2 Resolve~ promise2.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"then-方法链式调用识别-Promise-对象自返回-难点\"><a href=\"#then-方法链式调用识别-Promise-对象自返回-难点\" class=\"headerlink\" title=\"then 方法链式调用识别 Promise 对象自返回 [难点]\"></a>then 方法链式调用识别 Promise 对象自返回 [难点]</h3><p>在 Promise 中，如果 <code>then</code> 方法返回的是自己的 <code>Promise</code> 对象，则会发生 <code>Promise</code> 的嵌套，这个时候程序会报错。</p>\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">12</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = p1.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p2;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p2.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"comment\">// Promise &#123;&lt;rejected&gt;: TypeError: Chaining cycle detected for promise #&lt;Promise&gt;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught (in promise) TypeError: Chaining cycle detected for promise #&lt;Promise&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>解决办法</strong></p>\n<p>只需判断 <code>then</code> 返回的 Promise 实例与 then 中回调函数返回的实例是否是同一个即可，如果是引用的同一个实例，那么就抛出错误</p>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义所有状态常量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Promise是一个类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  status = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  onFulfilled = [];</span><br><span class=\"line\">  onRejected = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then 方法返回一个 MyPromise 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不用异步是拿不到 then 中生成的新 Promise 实例的</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> result = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">push</span>(onFulfilled);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">push</span>(onRejected);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolvePromise</span>(<span class=\"params\">promise, result, resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 promise 和 then 的返回值是同一个实例的话，需要抛出异常</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise === result) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里调用reject，并抛出一个Error</span></span><br><span class=\"line\">    <span class=\"comment\">// return 是必须的，阻止程序向下执行</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断 result 是不是 MyPromise 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 result 是 MyPromise 实例的话，需要根据 result 的状态调用 resolve 或者 reject</span></span><br><span class=\"line\">      result.<span class=\"title function_\">then</span>(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里 then 方法中的 setTimeout 的作用并不是延迟执行，而是为了调用 resolvePromise 函数时，保证创建的 promise 存在。</p>\n</blockquote>\n<p><strong>验证代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise2 = promise1.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; promise1.&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">promise2.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">` promise2.`</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason + <span class=\"string\">` promise2.`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ promise1.</span></span><br><span class=\"line\"><span class=\"comment\">// TypeError: Chaining cycle detected for promise #&lt;Promise&gt; promise2.</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"捕捉错误及-then-链式调用其他状态代码补充\"><a href=\"#捕捉错误及-then-链式调用其他状态代码补充\" class=\"headerlink\" title=\"捕捉错误及 then 链式调用其他状态代码补充\"></a>捕捉错误及 then 链式调用其他状态代码补充</h2><p>到目前为止我们实现的 Promise 并没有对异常做任何处理，为了保证代码的健壮性，我们需要对异常做一些处理。</p>\n<h3 id=\"捕捉执行器报错\"><a href=\"#捕捉执行器报错\" class=\"headerlink\" title=\"捕捉执行器报错\"></a>捕捉执行器报错</h3><p>如果执行器函数在执行过程中发生了异常，需要捕获异常并且在捕获逻辑中调用 reject 将异常传出去</p>\n<p><strong>关键实现代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;执行器异常&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise1.<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>, <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// Error: 执行器异常</span></span><br><span class=\"line\"><span class=\"comment\">//     at E:\\blog\\source\\_posts\\my-promise.js:100:11</span></span><br><span class=\"line\"><span class=\"comment\">//     at new MyPromise (E:\\blog\\source\\_posts\\my-promise.js:14:13)</span></span><br><span class=\"line\"><span class=\"comment\">//     at Object.&lt;anonymous&gt; (E:\\blog\\source\\_posts\\my-promise.js:99:18)</span></span><br><span class=\"line\"><span class=\"comment\">//     at Module._compile (node:internal/modules/cjs/loader:1126:14)</span></span><br><span class=\"line\"><span class=\"comment\">//     at Object.Module._extensions..js (node:internal/modules/cjs/loader:1180:10)</span></span><br><span class=\"line\"><span class=\"comment\">//     at Module.load (node:internal/modules/cjs/loader:1004:32)</span></span><br><span class=\"line\"><span class=\"comment\">//     at Function.Module._load (node:internal/modules/cjs/loader:839:12)</span></span><br><span class=\"line\"><span class=\"comment\">//     at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)</span></span><br><span class=\"line\"><span class=\"comment\">//     at node:internal/main/run_main_module:17:47</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"捕捉-then-中的报错\"><a href=\"#捕捉-then-中的报错\" class=\"headerlink\" title=\"捕捉 then 中的报错\"></a>捕捉 then 中的报错</h3><p>如果需要捕获 <code>then</code> 中的异常，与执行器中同理，需要在 then 中将捕获到的异常通过 reject 传递出去，异常需要通过 <code>try...catch</code> 捕获。</p>\n<p><strong>关键实现代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// then 方法返回一个 MyPromise 实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果不用异步是拿不到 then 中生成的新 Promise 实例的</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将成功的值作为参数返回</span></span><br><span class=\"line\">          <span class=\"comment\">// 保存执行回调函数的结果</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> result = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 如果返回的是一个普通的值，直接调用resolve</span></span><br><span class=\"line\">          <span class=\"comment\">// 如果是一个MyPromise实例，根据返回的promise实例状态来决定是调用resolve，还是reject</span></span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将失败的原因作为参数返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">push</span>(onFulfilled);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">push</span>(onRejected);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise1</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">pi</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span> * pi * r), <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>, <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// ReferenceError: r is not defined</span></span><br><span class=\"line\"><span class=\"comment\">//     at E:\\blog\\source\\_posts\\my-promise.js:112:40</span></span><br><span class=\"line\"><span class=\"comment\">//     at Timeout._onTimeout (E:\\blog\\source\\_posts\\my-promise.js:64:40)</span></span><br><span class=\"line\"><span class=\"comment\">//     at listOnTimeout (node:internal/timers:559:17)</span></span><br><span class=\"line\"><span class=\"comment\">//     at processTimers (node:internal/timers:502:7)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误与异步状态的链式调用\"><a href=\"#错误与异步状态的链式调用\" class=\"headerlink\" title=\"错误与异步状态的链式调用\"></a>错误与异步状态的链式调用</h3><p>目前只对成功状态的 then 进行了链式调用以及错误处理，错误与异步状态未进行处理，参照成功状态下的错误处理进行实现</p>\n<p><strong>关键实现代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// then 方法返回一个 MyPromise 实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果不用异步是拿不到 then 中生成的新 Promise 实例的</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将成功的值作为参数返回</span></span><br><span class=\"line\">          <span class=\"comment\">// 保存执行回调函数的结果</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> result = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 如果返回的是一个普通的值，直接调用resolve</span></span><br><span class=\"line\">          <span class=\"comment\">// 如果是一个MyPromise实例，根据返回的promise实例状态来决定是调用resolve，还是reject</span></span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将失败的原因作为参数返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 失败的处理同成功处理，只是调用的回调函数不同</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> result = <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">push</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"title function_\">onFulfilled</span>(value);</span><br><span class=\"line\">            <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">push</span>(<span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"title function_\">onRejected</span>(reason);</span><br><span class=\"line\">            <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyPromise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./myPromise&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">2000</span>, <span class=\"string\">&#x27;成功&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 第一个then方法中的错误要在第二个then方法中捕获到</span></span><br><span class=\"line\">promise</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;resolve&#x27;</span>, value);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;then的执行过程中遇到异常&#x27;</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"literal\">null</span>, <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason.<span class=\"property\">message</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"comment\">/* 输出</span></span><br><span class=\"line\"><span class=\"comment\">    resolve 成功</span></span><br><span class=\"line\"><span class=\"comment\">    then的执行过程中遇到异常</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将-then-方法的参数变成可选参数\"><a href=\"#将-then-方法的参数变成可选参数\" class=\"headerlink\" title=\"将 then 方法的参数变成可选参数\"></a>将 then 方法的参数变成可选参数</h2><p>Promise 中的 then 方法其实是两个<em>可选参数</em>，如果我们不传递任何参数的话，里面的结果是向下传递的，直到捕获为止。</p>\n<p><strong>示例代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value));</span><br><span class=\"line\"><span class=\"comment\">// 最后一个then输入100</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>这段代码可以理解为</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> value)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> value)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> value)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value));</span><br></pre></td></tr></table></figure>\n\n<p><strong>关键实现</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// then方法的实现</span></span><br><span class=\"line\">then (onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果传递函数，就是用传递的函数，否则指定一个默认值，用于参数传递</span></span><br><span class=\"line\">    onFulfilled = onFulfilled ? onFulfilled : <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value</span><br><span class=\"line\">    <span class=\"comment\">// 同理</span></span><br><span class=\"line\">    onRejected = onRejected ? onRejected : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> reason &#125;</span><br><span class=\"line\">    <span class=\"comment\">// then 方法返回一个MyPromise实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前状态,根据状态调用指定回调</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-all-方法的实现\"><a href=\"#Promise-all-方法的实现\" class=\"headerlink\" title=\"Promise.all 方法的实现\"></a>Promise.all 方法的实现</h2><p>简单的说 <code>Promise.all()</code> 会将多个 Promise 实例包装为一个 Promise 实例，且顺序与调用顺序一致:<br><strong>示例代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;p1&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;p2&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"title function_\">p1</span>(), <span class=\"title function_\">p2</span>(), <span class=\"string\">&#x27;c&#x27;</span>]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">  <span class=\"comment\">// [&quot;a&quot;, &quot;b&quot;, &quot;p1&quot;, &quot;p2&quot;, &quot;c&quot;]</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在这段代码中，我们的 p1 的执行是延迟了 2s 的，这里如果不使用 Promise.all()的话最终顺序是与我们调用不同的。</p>\n<p><strong>分析 Promise.all 的实现思路</strong></p>\n<ul>\n<li><code>all()</code> 方法是通过类直接调用的，所以是一个静态方法</li>\n<li><code>all()</code> 方法接收一个数组，数组中的值可以是一个普通值，也可以是一个 MyPromise 实例</li>\n<li>return 一个新的 MyPromise 实例</li>\n<li>遍历数组中的每一个值，判断值的类型，如果是一个普通值就直接将值存入一个结果数组；如果是一个 MyPromise 实例对象，会调用其 then 方法，然后根据执行后的状态，如果失败的话调用 MyPromise 的 reject 方法，如果成功的话将值存入结果数组；</li>\n<li>存入数组时计数，如果存入的数量达到传入的数组长度，说明调用完毕，执行 <code>resolve</code> 并将最终的结果数组作为参数返回。</li>\n</ul>\n<p><strong>关键实现</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">all</span> = <span class=\"function\">(<span class=\"params\">array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用于存放最终结果的数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">  <span class=\"comment\">// 用于计算当前已经执行完的实例的数量，用于指定当前数据项结果在 result 中的索引位置</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 MyPromise 实例</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">addResult</span>(<span class=\"params\">result, index, value, resolve</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 根据索引值，将结果推入数组中</span></span><br><span class=\"line\">      result[index] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 执行完毕一个 count+1，如果当前值等于总长度的话说明已经执行结束了，可以直接调用resolve，说明已经成功执行完毕了</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (++count === array.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将执行结果返回</span></span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历传入的数组</span></span><br><span class=\"line\">    array.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果是 MyPromise 实例，则调用 then 方法，获取该实例的值，并将值存入到 result数组的 index 指定索引中</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (item <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">        item.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">addResult</span>(result, index, value, resolve);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// 如果失败直接返回失败原因</span></span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(reason);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">addResult</span>(result, index, item, resolve);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试示例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;p1&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;p2&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">all</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"title function_\">p1</span>(), <span class=\"title function_\">p2</span>(), <span class=\"string\">&#x27;c&#x27;</span>]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">  <span class=\"comment\">// [&quot;a&quot;, &quot;b&quot;, &quot;p1&quot;, &quot;p2&quot;, &quot;c&quot;]</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-resolve-方法的实现\"><a href=\"#Promise-resolve-方法的实现\" class=\"headerlink\" title=\"Promise.resolve 方法的实现\"></a>Promise.resolve 方法的实现</h2><p>关于 Promise.resolve()方法的用法可以参考 Promise.resolve()与 Promise.reject()。<br><strong>直线思路分析</strong></p>\n<ul>\n<li>该方法是一个静态方法</li>\n<li>该方法接收的如果是一个值就直接将该值包装为一个 MyPromise 实例对象返回,如果是一个 MyPromise 实例对象,则直接返回</li>\n</ul>\n<p><strong>关键实现</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">resolve</span> = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果是MyPromise的实例，就直接返回这个实例</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不是的话创建一个MyPromise实例，并返回传递的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> <span class=\"title function_\">resolve</span>(value));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;p1&#x27;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;p2&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">p1</span>()).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>, <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">3.1415926</span>).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">p2</span>()).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>, <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// p1</span></span><br><span class=\"line\"><span class=\"comment\">// 3.1415926</span></span><br><span class=\"line\"><span class=\"comment\">// 2s后输出</span></span><br><span class=\"line\"><span class=\"comment\">// p2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"finally-方法的实现\"><a href=\"#finally-方法的实现\" class=\"headerlink\" title=\"finally 方法的实现\"></a>finally 方法的实现</h2><p><strong>实现思路分析</strong></p>\n<ul>\n<li>不管 Promise 是 Fulfilled 还是 Rejected 状态,都会调用 finally 函数中的回调参数</li>\n<li>返回一个新的 Promise 实例</li>\n</ul>\n<p><strong>关键实现</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">finally</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">        <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">callback</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> value),</span><br><span class=\"line\">        <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">callback</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"keyword\">throw</span> reason &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;p1&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;p2 reject&#x27;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">p2</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;finally p2&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">p1</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"comment\">// finally p2</span></span><br><span class=\"line\"><span class=\"comment\">// 两秒之后执行p2 reject</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"catch-方法的实现\"><a href=\"#catch-方法的实现\" class=\"headerlink\" title=\"catch 方法的实现\"></a>catch 方法的实现</h2><p>关于 catch 方法可以参考 catch()，实现该方法其实非常简单，只需要在内部调用 then 方法，不传递第一个回调函数即可</p>\n<p><strong>关键实现</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">catch</span>(callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">null</span>, callback);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;reject&#x27;</span>));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">p</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason));</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// Error: reject</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义所有状态常量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Promise是一个类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  status = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  onFulfilled = [];</span><br><span class=\"line\">  onRejected = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果传递函数，就是用传递的函数，否则指定一个默认值，用于参数传递</span></span><br><span class=\"line\">    onFulfilled = onFulfilled ? onFulfilled : <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> value;</span><br><span class=\"line\">    <span class=\"comment\">// 同理</span></span><br><span class=\"line\">    onRejected = onRejected</span><br><span class=\"line\">      ? onRejected</span><br><span class=\"line\">      : <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then 方法返回一个 MyPromise 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不用异步是拿不到 then 中生成的新 Promise 实例的</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将成功的值作为参数返回</span></span><br><span class=\"line\">            <span class=\"comment\">// 保存执行回调函数的结果</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 如果返回的是一个普通的值，直接调用resolve</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果是一个MyPromise实例，根据返回的promise实例状态来决定是调用resolve，还是reject</span></span><br><span class=\"line\">            <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 将失败的原因作为参数返回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 失败的处理同成功处理，只是调用的回调函数不同</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">            <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">push</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = <span class=\"title function_\">onFulfilled</span>(value);</span><br><span class=\"line\">              <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">push</span>(<span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = <span class=\"title function_\">onRejected</span>(reason);</span><br><span class=\"line\">              <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">finally</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">callback</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> value),</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">callback</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">null</span>, callback);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">all</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用于存放最终结果的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"comment\">// 用于计算当前已经执行完的实例的数量，用于指定当前数据项结果在 result 中的索引位置</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回一个 MyPromise 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">function</span> <span class=\"title function_\">addResult</span>(<span class=\"params\">result, index, value, resolve</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据索引值，将结果推入数组中</span></span><br><span class=\"line\">        result[index] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行完毕一个 count+1，如果当前值等于总长度的话说明已经执行结束了，可以直接调用resolve，说明已经成功执行完毕了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++count === array.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将执行结果返回</span></span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 遍历传入的数组</span></span><br><span class=\"line\">      array.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果是 MyPromise 实例，则调用 then 方法，获取该实例的值，并将值存入到 result数组的 index 指定索引中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">          item.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">addResult</span>(result, index, value, resolve);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 如果失败直接返回失败原因</span></span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">addResult</span>(result, index, item, resolve);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果是MyPromise的实例，就直接返回这个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果不是的话创建一个MyPromise实例，并返回传递的值</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> <span class=\"title function_\">resolve</span>(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolvePromise</span>(<span class=\"params\">promise, result, resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 promise 和 then 的返回值是同一个实例的话，需要抛出异常</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise === result) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里调用reject，并抛出一个Error</span></span><br><span class=\"line\">    <span class=\"comment\">// return 是必须的，阻止程序向下执行</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断 result 是不是 MyPromise 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 result 是 MyPromise 实例的话，需要根据 result 的状态调用 resolve 或者 reject</span></span><br><span class=\"line\">      result.<span class=\"title function_\">then</span>(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Promise 是 ES6 异步编程的核心，很多库的异步都从回调向 Promise 转变，Promise 在前端领域发挥着越来越重要的作用；掌握 Promise 的正确使用、理解 Promise 的实现成为了现代前端开发者不可或缺的技能。</p>\n<!--\n### Promise 是什么\n\n### Promise 如何使用\n\n### Promise 什么场景|时候使用\n-->\n\n<h2 id=\"Promise-的核心原理实现\"><a href=\"#Promise-的核心原理实现\" class=\"headerlink\" title=\"Promise 的核心原理实现\"></a>Promise 的核心原理实现</h2><p>首先我们从 Promise 的定义和使用方式开始分析 Promise。</p>\n<h3 id=\"Promise-的使用分析\"><a href=\"#Promise-的使用分析\" class=\"headerlink\" title=\"Promise 的使用分析\"></a>Promise 的使用分析</h3><p>Promise 是一个类，在执行这个类的时候，需要传递一个执行器参数，执行器会立即执行。</p>\n<h4 id=\"Promise-的三个状态\"><a href=\"#Promise-的三个状态\" class=\"headerlink\" title=\"Promise 的三个状态\"></a>Promise 的三个状态</h4><ul>\n<li>pending → 等待</li>\n<li>fulfilled → 成功</li>\n<li>rejected → 失败</li>\n</ul>\n<h4 id=\"状态切换\"><a href=\"#状态切换\" class=\"headerlink\" title=\"状态切换\"></a>状态切换</h4><ul>\n<li>pending → fulfilled</li>\n<li>pending → rejected</li>\n</ul>\n<h4 id=\"一旦状态发生改变，状态将不可变\"><a href=\"#一旦状态发生改变，状态将不可变\" class=\"headerlink\" title=\"一旦状态发生改变，状态将不可变\"></a>一旦状态发生改变，状态将不可变</h4><ul>\n<li>执行器中的两个参数，分别是 resolve 和 reject，其实就是两个回调函数，调用 resolve 是从 pending 状态转变为 fulfilled 状态，调用 reject 是从 pending 状态转变为 rejected 状态。传递给这两个回调函数的参数会作为成功或失败的值。</li>\n<li>Promise 实例对象具有一个 then 方法，该方法接受两个回调函数，分别来处理成功与失败的状态，then 方法内部会进行判断，然后根据当前的状态调用对应的回调函数。then 方法应该是被定义在原型对象中的。</li>\n<li>then 的回调函数中都包含一个值，如果是成功，表示成功后返回的值；如果是失败，就表示失败的原因。</li>\n</ul>\n<h3 id=\"MyPromise-的实现\"><a href=\"#MyPromise-的实现\" class=\"headerlink\" title=\"MyPromise 的实现\"></a>MyPromise 的实现</h3><p>根据上述分析，我们可以给出如下实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 所有状态</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Promise 本质上是一个类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化Promise时需要一个执行器回调，该回调立即执行</span></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//   Promise 的初始状态;</span></span><br><span class=\"line\">  status = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 记录成功与失败的值</span></span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此处使用箭头函数为了解决resolve调用中this的指向问题</span></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果状态不是 PENDING 直接跳出该逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将状态修改为 成功</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 resolve 回调的参数进行保存</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将状态修改为失败</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存失败的原因</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据当前状态指定回调</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将成功的值作为回调函数的参数返回</span></span><br><span class=\"line\">      <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将失败的值作为回调函数的参数返回</span></span><br><span class=\"line\">      <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们给出一段验证代码：</p>\n<p><strong>验证 resolve</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyPromise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./my-promise&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>验证 reject</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyPromise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./my-promise&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;Hello Promise Reject~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Reject~</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>验证状态不可变</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyPromise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./my-promise&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;Hello Promise Reject~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>测试异步</strong></p>\n<p>上述简易版 Promise 中如果存在异步操作将无法正确处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyPromise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./my-promise&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resole, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">2000</span>, <span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>上述代码将不会有任何输出</p>\n<p><strong>原因分析</strong></p>\n<ul>\n<li>MyPromise 的实现中没有考虑异步的实现，在异步函数中修改 Promise 的状态后没有调用 then 回调</li>\n<li>then 回调先于 resolve&#x2F;reject 执行，此时 Promise 的状态还处于 PENDING，将不会执行任何操作[MyPromise 中未对该阶段进行处理]</li>\n</ul>\n<h3 id=\"在-Promise-中加入异步操作\"><a href=\"#在-Promise-中加入异步操作\" class=\"headerlink\" title=\"在 Promise 中加入异步操作\"></a>在 Promise 中加入异步操作</h3><p>根据 <code>原因分析</code> 给出如下解决办法：</p>\n<ol>\n<li>创建 <code>onFulfilled</code> 和 <code>onRejected</code> 两个属性用来存储 then 中的回调</li>\n<li>为 <code>then</code> 方法添加状态为 <code>PENDING</code> 的处理逻辑，及时将 onFulfilled 和 onRejected 回调进行存储，便于在异步方法中调用 resolve&#x2F;reject 变更状态时及时触发对应的 then 中的回调</li>\n<li>在成功或失败时及时调用对应的 onFulfilled 或者 onRejected 回调</li>\n</ol>\n<p>增加异步操作的 Promise 实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化Promise时需要一个执行器回调，该回调立即执行</span></span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//   Promise 的初始状态;</span></span><br><span class=\"line\">  status = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 记录成功与失败的值</span></span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// then中的onFulfilled和onRejected回调</span></span><br><span class=\"line\">  onFulfilled = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  onRejected = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 此处使用箭头函数为了解决resolve调用中this的指向问题</span></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果状态不是 PENDING 直接跳出该逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将状态修改为 成功</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 resolve 回调的参数进行保存</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果状态变更为 成功，调用成功的回调</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将状态修改为失败</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存失败的原因</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果状态变更为 失败，调用失败的回调</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据当前状态指定回调</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将成功的值作为回调函数的参数返回</span></span><br><span class=\"line\">      <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将失败的值作为回调函数的参数返回</span></span><br><span class=\"line\">      <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 既不是成功也不是失败。这个时候保存传递进来的两个回调，便于 异步操作中 更新 Promise 状态时，触发对应的回调</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span> = onFulfilled;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span> = onRejected;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>验证多次 then 调用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">2000</span>, <span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; first.&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; second.&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; third.&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 3s后输出： Hello Promise Resolve~ third.</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>原因分析</strong></p>\n<p>如果执行器中存在<strong>异步逻辑</strong>，<code>then 函数又先于 异步逻辑 执行</code>，导致多次 <code>then</code> 调用存在覆盖 bug，即在后面的 then 调用会覆盖前面的 <code>then</code> 回调</p>\n<h3 id=\"实现-then-方法的多次调用\"><a href=\"#实现-then-方法的多次调用\" class=\"headerlink\" title=\"实现 then 方法的多次调用\"></a>实现 then 方法的多次调用</h3><p>根据 <code>原因分析</code> 给出如下解决方案：</p>\n<ol>\n<li>将保存 <code>then</code> 回调的 onFulfilled 和 onRejected 属性改为数组形式，便于存储多个 <code>then</code> 回调.</li>\n</ol>\n<p>增加存储多次 then 回调的实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义所有状态常量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Promise是一个类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  status = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  onFulfilled = [];</span><br><span class=\"line\">  onRejected = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">push</span>(onFulfilled);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">push</span>(onRejected);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>验证多次 then 调用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; first.&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; second.&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; third.&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// 立即输出：</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ first.</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ second.</span></span><br><span class=\"line\"><span class=\"comment\">// 1s后输出</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ third.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">2000</span>, <span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; first.&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; second.&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; third.&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// 2s后输出：</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ first.</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ second.</span></span><br><span class=\"line\"><span class=\"comment\">// 3s后输出</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ third.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现-then-方法的链式调用-难点\"><a href=\"#实现-then-方法的链式调用-难点\" class=\"headerlink\" title=\"实现 then 方法的链式调用[难点]\"></a><text style=\"color: red;\">实现 then 方法的链式调用[难点]</text></h3><p><strong>要想实现 then 的链式调用，主要需要解决两个问题：</strong></p>\n<ol>\n<li>返回的是一个新的 <code>MyPromise</code> 的实例；</li>\n<li><code>then</code> 的返回值作为下一次的链式调用的参数。</li>\n</ol>\n<p><strong>这里分为两种情况：</strong></p>\n<ol>\n<li>直接返回一个值，可以直接作为值使用；</li>\n<li>返回一个新的 <code>MyPromise</code> 实例，此时就需要判断其状态；</li>\n</ol>\n<p><strong>代码实现</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义所有状态常量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Promise是一个类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  status = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  onFulfilled = [];</span><br><span class=\"line\">  onRejected = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then 方法返回一个 MyPromise 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果result是一个普通值，直接resolve(result)</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果是一个 MyPromise 实例，根据返回的解决来决定时调用 resolve 还是 reject</span></span><br><span class=\"line\">        <span class=\"title function_\">resolvePromise</span>(result, resolve, reject);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">push</span>(onFulfilled);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">push</span>(onRejected);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolvePromise</span>(<span class=\"params\">result, resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">    result.<span class=\"title function_\">then</span>(resolve, reject);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>验证链式调用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise2 = promise1.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; promise1.&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 当前 Promise 的 resolve 回调函数的返回值将作为下一个链式调用的 then 中的 onFulfilled 回调函数的参数值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello Promise2 Resolve~&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">promise2.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"comment\">// 此处的 value 即为 &#x27;Hello Promise2 Resolve~&#x27;</span></span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">` promise2.`</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason + <span class=\"string\">` promise2.`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ promise1.</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise2 Resolve~ promise2.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"then-方法链式调用识别-Promise-对象自返回-难点\"><a href=\"#then-方法链式调用识别-Promise-对象自返回-难点\" class=\"headerlink\" title=\"then 方法链式调用识别 Promise 对象自返回 [难点]\"></a>then 方法链式调用识别 Promise 对象自返回 [难点]</h3><p>在 Promise 中，如果 <code>then</code> 方法返回的是自己的 <code>Promise</code> 对象，则会发生 <code>Promise</code> 的嵌套，这个时候程序会报错。</p>\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">12</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = p1.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p2;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p2.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// 12</span></span><br><span class=\"line\"><span class=\"comment\">// Promise &#123;&lt;rejected&gt;: TypeError: Chaining cycle detected for promise #&lt;Promise&gt;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught (in promise) TypeError: Chaining cycle detected for promise #&lt;Promise&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>解决办法</strong></p>\n<p>只需判断 <code>then</code> 返回的 Promise 实例与 then 中回调函数返回的实例是否是同一个即可，如果是引用的同一个实例，那么就抛出错误</p>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义所有状态常量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Promise是一个类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  status = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  onFulfilled = [];</span><br><span class=\"line\">  onRejected = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// then 方法返回一个 MyPromise 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不用异步是拿不到 then 中生成的新 Promise 实例的</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> result = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">push</span>(onFulfilled);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">push</span>(onRejected);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolvePromise</span>(<span class=\"params\">promise, result, resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 promise 和 then 的返回值是同一个实例的话，需要抛出异常</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise === result) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里调用reject，并抛出一个Error</span></span><br><span class=\"line\">    <span class=\"comment\">// return 是必须的，阻止程序向下执行</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断 result 是不是 MyPromise 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 result 是 MyPromise 实例的话，需要根据 result 的状态调用 resolve 或者 reject</span></span><br><span class=\"line\">      result.<span class=\"title function_\">then</span>(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里 then 方法中的 setTimeout 的作用并不是延迟执行，而是为了调用 resolvePromise 函数时，保证创建的 promise 存在。</p>\n</blockquote>\n<p><strong>验证代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;Hello Promise Resolve~&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> promise2 = promise1.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">&#x27; promise1.&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">promise2.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value + <span class=\"string\">` promise2.`</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason + <span class=\"string\">` promise2.`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// Hello Promise Resolve~ promise1.</span></span><br><span class=\"line\"><span class=\"comment\">// TypeError: Chaining cycle detected for promise #&lt;Promise&gt; promise2.</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"捕捉错误及-then-链式调用其他状态代码补充\"><a href=\"#捕捉错误及-then-链式调用其他状态代码补充\" class=\"headerlink\" title=\"捕捉错误及 then 链式调用其他状态代码补充\"></a>捕捉错误及 then 链式调用其他状态代码补充</h2><p>到目前为止我们实现的 Promise 并没有对异常做任何处理，为了保证代码的健壮性，我们需要对异常做一些处理。</p>\n<h3 id=\"捕捉执行器报错\"><a href=\"#捕捉执行器报错\" class=\"headerlink\" title=\"捕捉执行器报错\"></a>捕捉执行器报错</h3><p>如果执行器函数在执行过程中发生了异常，需要捕获异常并且在捕获逻辑中调用 reject 将异常传出去</p>\n<p><strong>关键实现代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;执行器异常&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise1.<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>, <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// Error: 执行器异常</span></span><br><span class=\"line\"><span class=\"comment\">//     at E:\\blog\\source\\_posts\\my-promise.js:100:11</span></span><br><span class=\"line\"><span class=\"comment\">//     at new MyPromise (E:\\blog\\source\\_posts\\my-promise.js:14:13)</span></span><br><span class=\"line\"><span class=\"comment\">//     at Object.&lt;anonymous&gt; (E:\\blog\\source\\_posts\\my-promise.js:99:18)</span></span><br><span class=\"line\"><span class=\"comment\">//     at Module._compile (node:internal/modules/cjs/loader:1126:14)</span></span><br><span class=\"line\"><span class=\"comment\">//     at Object.Module._extensions..js (node:internal/modules/cjs/loader:1180:10)</span></span><br><span class=\"line\"><span class=\"comment\">//     at Module.load (node:internal/modules/cjs/loader:1004:32)</span></span><br><span class=\"line\"><span class=\"comment\">//     at Function.Module._load (node:internal/modules/cjs/loader:839:12)</span></span><br><span class=\"line\"><span class=\"comment\">//     at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)</span></span><br><span class=\"line\"><span class=\"comment\">//     at node:internal/main/run_main_module:17:47</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"捕捉-then-中的报错\"><a href=\"#捕捉-then-中的报错\" class=\"headerlink\" title=\"捕捉 then 中的报错\"></a>捕捉 then 中的报错</h3><p>如果需要捕获 <code>then</code> 中的异常，与执行器中同理，需要在 then 中将捕获到的异常通过 reject 传递出去，异常需要通过 <code>try...catch</code> 捕获。</p>\n<p><strong>关键实现代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// then 方法返回一个 MyPromise 实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果不用异步是拿不到 then 中生成的新 Promise 实例的</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将成功的值作为参数返回</span></span><br><span class=\"line\">          <span class=\"comment\">// 保存执行回调函数的结果</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> result = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 如果返回的是一个普通的值，直接调用resolve</span></span><br><span class=\"line\">          <span class=\"comment\">// 如果是一个MyPromise实例，根据返回的promise实例状态来决定是调用resolve，还是reject</span></span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将失败的原因作为参数返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">push</span>(onFulfilled);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">push</span>(onRejected);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise1</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">pi</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span> * pi * r), <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>, <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// ReferenceError: r is not defined</span></span><br><span class=\"line\"><span class=\"comment\">//     at E:\\blog\\source\\_posts\\my-promise.js:112:40</span></span><br><span class=\"line\"><span class=\"comment\">//     at Timeout._onTimeout (E:\\blog\\source\\_posts\\my-promise.js:64:40)</span></span><br><span class=\"line\"><span class=\"comment\">//     at listOnTimeout (node:internal/timers:559:17)</span></span><br><span class=\"line\"><span class=\"comment\">//     at processTimers (node:internal/timers:502:7)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误与异步状态的链式调用\"><a href=\"#错误与异步状态的链式调用\" class=\"headerlink\" title=\"错误与异步状态的链式调用\"></a>错误与异步状态的链式调用</h3><p>目前只对成功状态的 then 进行了链式调用以及错误处理，错误与异步状态未进行处理，参照成功状态下的错误处理进行实现</p>\n<p><strong>关键实现代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// then 方法返回一个 MyPromise 实例</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果不用异步是拿不到 then 中生成的新 Promise 实例的</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将成功的值作为参数返回</span></span><br><span class=\"line\">          <span class=\"comment\">// 保存执行回调函数的结果</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> result = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 如果返回的是一个普通的值，直接调用resolve</span></span><br><span class=\"line\">          <span class=\"comment\">// 如果是一个MyPromise实例，根据返回的promise实例状态来决定是调用resolve，还是reject</span></span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将失败的原因作为参数返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 失败的处理同成功处理，只是调用的回调函数不同</span></span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> result = <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">push</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"title function_\">onFulfilled</span>(value);</span><br><span class=\"line\">            <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">push</span>(<span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"title function_\">onRejected</span>(reason);</span><br><span class=\"line\">            <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyPromise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./myPromise&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">2000</span>, <span class=\"string\">&#x27;成功&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 第一个then方法中的错误要在第二个then方法中捕获到</span></span><br><span class=\"line\">promise</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;resolve&#x27;</span>, value);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;then的执行过程中遇到异常&#x27;</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"literal\">null</span>, <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason.<span class=\"property\">message</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"comment\">/* 输出</span></span><br><span class=\"line\"><span class=\"comment\">    resolve 成功</span></span><br><span class=\"line\"><span class=\"comment\">    then的执行过程中遇到异常</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将-then-方法的参数变成可选参数\"><a href=\"#将-then-方法的参数变成可选参数\" class=\"headerlink\" title=\"将 then 方法的参数变成可选参数\"></a>将 then 方法的参数变成可选参数</h2><p>Promise 中的 then 方法其实是两个<em>可选参数</em>，如果我们不传递任何参数的话，里面的结果是向下传递的，直到捕获为止。</p>\n<p><strong>示例代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value));</span><br><span class=\"line\"><span class=\"comment\">// 最后一个then输入100</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>这段代码可以理解为</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> value)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> value)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> value)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value));</span><br></pre></td></tr></table></figure>\n\n<p><strong>关键实现</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// then方法的实现</span></span><br><span class=\"line\">then (onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果传递函数，就是用传递的函数，否则指定一个默认值，用于参数传递</span></span><br><span class=\"line\">    onFulfilled = onFulfilled ? onFulfilled : <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value</span><br><span class=\"line\">    <span class=\"comment\">// 同理</span></span><br><span class=\"line\">    onRejected = onRejected ? onRejected : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> reason &#125;</span><br><span class=\"line\">    <span class=\"comment\">// then 方法返回一个MyPromise实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前状态,根据状态调用指定回调</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;...</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-all-方法的实现\"><a href=\"#Promise-all-方法的实现\" class=\"headerlink\" title=\"Promise.all 方法的实现\"></a>Promise.all 方法的实现</h2><p>简单的说 <code>Promise.all()</code> 会将多个 Promise 实例包装为一个 Promise 实例，且顺序与调用顺序一致:<br><strong>示例代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;p1&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;p2&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"title function_\">p1</span>(), <span class=\"title function_\">p2</span>(), <span class=\"string\">&#x27;c&#x27;</span>]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">  <span class=\"comment\">// [&quot;a&quot;, &quot;b&quot;, &quot;p1&quot;, &quot;p2&quot;, &quot;c&quot;]</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在这段代码中，我们的 p1 的执行是延迟了 2s 的，这里如果不使用 Promise.all()的话最终顺序是与我们调用不同的。</p>\n<p><strong>分析 Promise.all 的实现思路</strong></p>\n<ul>\n<li><code>all()</code> 方法是通过类直接调用的，所以是一个静态方法</li>\n<li><code>all()</code> 方法接收一个数组，数组中的值可以是一个普通值，也可以是一个 MyPromise 实例</li>\n<li>return 一个新的 MyPromise 实例</li>\n<li>遍历数组中的每一个值，判断值的类型，如果是一个普通值就直接将值存入一个结果数组；如果是一个 MyPromise 实例对象，会调用其 then 方法，然后根据执行后的状态，如果失败的话调用 MyPromise 的 reject 方法，如果成功的话将值存入结果数组；</li>\n<li>存入数组时计数，如果存入的数量达到传入的数组长度，说明调用完毕，执行 <code>resolve</code> 并将最终的结果数组作为参数返回。</li>\n</ul>\n<p><strong>关键实现</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">all</span> = <span class=\"function\">(<span class=\"params\">array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用于存放最终结果的数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">  <span class=\"comment\">// 用于计算当前已经执行完的实例的数量，用于指定当前数据项结果在 result 中的索引位置</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 MyPromise 实例</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">addResult</span>(<span class=\"params\">result, index, value, resolve</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 根据索引值，将结果推入数组中</span></span><br><span class=\"line\">      result[index] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 执行完毕一个 count+1，如果当前值等于总长度的话说明已经执行结束了，可以直接调用resolve，说明已经成功执行完毕了</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (++count === array.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将执行结果返回</span></span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历传入的数组</span></span><br><span class=\"line\">    array.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果是 MyPromise 实例，则调用 then 方法，获取该实例的值，并将值存入到 result数组的 index 指定索引中</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (item <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">        item.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">addResult</span>(result, index, value, resolve);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"comment\">// 如果失败直接返回失败原因</span></span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(reason);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">addResult</span>(result, index, item, resolve);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试示例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;p1&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;p2&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">all</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"title function_\">p1</span>(), <span class=\"title function_\">p2</span>(), <span class=\"string\">&#x27;c&#x27;</span>]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">  <span class=\"comment\">// [&quot;a&quot;, &quot;b&quot;, &quot;p1&quot;, &quot;p2&quot;, &quot;c&quot;]</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-resolve-方法的实现\"><a href=\"#Promise-resolve-方法的实现\" class=\"headerlink\" title=\"Promise.resolve 方法的实现\"></a>Promise.resolve 方法的实现</h2><p>关于 Promise.resolve()方法的用法可以参考 Promise.resolve()与 Promise.reject()。<br><strong>直线思路分析</strong></p>\n<ul>\n<li>该方法是一个静态方法</li>\n<li>该方法接收的如果是一个值就直接将该值包装为一个 MyPromise 实例对象返回,如果是一个 MyPromise 实例对象,则直接返回</li>\n</ul>\n<p><strong>关键实现</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\">resolve</span> = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果是MyPromise的实例，就直接返回这个实例</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果不是的话创建一个MyPromise实例，并返回传递的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> <span class=\"title function_\">resolve</span>(value));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;p1&#x27;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;p2&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">p1</span>()).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>, <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">3.1415926</span>).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">p2</span>()).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>, <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>);</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// p1</span></span><br><span class=\"line\"><span class=\"comment\">// 3.1415926</span></span><br><span class=\"line\"><span class=\"comment\">// 2s后输出</span></span><br><span class=\"line\"><span class=\"comment\">// p2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"finally-方法的实现\"><a href=\"#finally-方法的实现\" class=\"headerlink\" title=\"finally 方法的实现\"></a>finally 方法的实现</h2><p><strong>实现思路分析</strong></p>\n<ul>\n<li>不管 Promise 是 Fulfilled 还是 Rejected 状态,都会调用 finally 函数中的回调参数</li>\n<li>返回一个新的 Promise 实例</li>\n</ul>\n<p><strong>关键实现</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">finally</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">        <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">callback</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> value),</span><br><span class=\"line\">        <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">callback</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"keyword\">throw</span> reason &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;p1&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;p2 reject&#x27;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">p2</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;finally p2&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">p1</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"comment\">// finally p2</span></span><br><span class=\"line\"><span class=\"comment\">// 两秒之后执行p2 reject</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"catch-方法的实现\"><a href=\"#catch-方法的实现\" class=\"headerlink\" title=\"catch 方法的实现\"></a>catch 方法的实现</h2><p>关于 catch 方法可以参考 catch()，实现该方法其实非常简单，只需要在内部调用 then 方法，不传递第一个回调函数即可</p>\n<p><strong>关键实现</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">catch</span>(callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">null</span>, callback);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">p</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;reject&#x27;</span>));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">p</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(reason));</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// Error: reject</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义所有状态常量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FULFILLED</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Promise是一个类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  status = <span class=\"variable constant_\">PENDING</span>;</span><br><span class=\"line\">  value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  onFulfilled = [];</span><br><span class=\"line\">  onRejected = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  resolve = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">FULFILLED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  reject = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果传递函数，就是用传递的函数，否则指定一个默认值，用于参数传递</span></span><br><span class=\"line\">    onFulfilled = onFulfilled ? onFulfilled : <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> value;</span><br><span class=\"line\">    <span class=\"comment\">// 同理</span></span><br><span class=\"line\">    onRejected = onRejected</span><br><span class=\"line\">      ? onRejected</span><br><span class=\"line\">      : <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// then 方法返回一个 MyPromise 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">FULFILLED</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不用异步是拿不到 then 中生成的新 Promise 实例的</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将成功的值作为参数返回</span></span><br><span class=\"line\">            <span class=\"comment\">// 保存执行回调函数的结果</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 如果返回的是一个普通的值，直接调用resolve</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果是一个MyPromise实例，根据返回的promise实例状态来决定是调用resolve，还是reject</span></span><br><span class=\"line\">            <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 将失败的原因作为参数返回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 失败的处理同成功处理，只是调用的回调函数不同</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>);</span><br><span class=\"line\">            <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 表示既不是成功，也不是失败。这个时候保存传递进来的两个回调</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onFulfilled</span>.<span class=\"title function_\">push</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = <span class=\"title function_\">onFulfilled</span>(value);</span><br><span class=\"line\">              <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejected</span>.<span class=\"title function_\">push</span>(<span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> result = <span class=\"title function_\">onRejected</span>(reason);</span><br><span class=\"line\">              <span class=\"title function_\">resolvePromise</span>(promise, result, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">finally</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">callback</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> value),</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">callback</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">null</span>, callback);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">all</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用于存放最终结果的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"comment\">// 用于计算当前已经执行完的实例的数量，用于指定当前数据项结果在 result 中的索引位置</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回一个 MyPromise 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">function</span> <span class=\"title function_\">addResult</span>(<span class=\"params\">result, index, value, resolve</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据索引值，将结果推入数组中</span></span><br><span class=\"line\">        result[index] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行完毕一个 count+1，如果当前值等于总长度的话说明已经执行结束了，可以直接调用resolve，说明已经成功执行完毕了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++count === array.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将执行结果返回</span></span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 遍历传入的数组</span></span><br><span class=\"line\">      array.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果是 MyPromise 实例，则调用 then 方法，获取该实例的值，并将值存入到 result数组的 index 指定索引中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">          item.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">addResult</span>(result, index, value, resolve);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 如果失败直接返回失败原因</span></span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              <span class=\"title function_\">reject</span>(reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">addResult</span>(result, index, item, resolve);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果是MyPromise的实例，就直接返回这个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果不是的话创建一个MyPromise实例，并返回传递的值</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> <span class=\"title function_\">resolve</span>(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolvePromise</span>(<span class=\"params\">promise, result, resolve, reject</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 promise 和 then 的返回值是同一个实例的话，需要抛出异常</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promise === result) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里调用reject，并抛出一个Error</span></span><br><span class=\"line\">    <span class=\"comment\">// return 是必须的，阻止程序向下执行</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断 result 是不是 MyPromise 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 result 是 MyPromise 实例的话，需要根据 result 的状态调用 resolve 或者 reject</span></span><br><span class=\"line\">      result.<span class=\"title function_\">then</span>(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Hexo快速入门","date":"2023-01-30T16:00:00.000Z","comments":1,"_content":"\n## 快速开始\n\n### 生成一个新的文章\n\n```bash\n$ hexo new \"My New Post\"\n```\n\n详细用法请参考: [Writing](https://hexo.io/docs/writing.html)\n\n### 运行 Hexo 服务\n\n```bash\n$ hexo server\n```\n\n详细用法请参考: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n```bash\n$ hexo generate\n```\n\n详细用法请参考: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署到远程网站\n\n```bash\n$ hexo deploy\n```\n\n详细用法请参考: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hexo-basic.md","raw":"---\n# layout: # 布局，默认使用config.default._layout\ntitle: Hexo快速入门 # 文章的文件名\ndate: 2023-01-31 # 文件创建日期\ncomments: true # 开启文章的评论功能\ntags: # 标签\n  - 文档工具\ncategories: 工具 # 分类\n# permalink:  # 覆盖文章的永久链接，永久链接应该以 / 或者 .html 结尾\n---\n\n## 快速开始\n\n### 生成一个新的文章\n\n```bash\n$ hexo new \"My New Post\"\n```\n\n详细用法请参考: [Writing](https://hexo.io/docs/writing.html)\n\n### 运行 Hexo 服务\n\n```bash\n$ hexo server\n```\n\n详细用法请参考: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n```bash\n$ hexo generate\n```\n\n详细用法请参考: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署到远程网站\n\n```bash\n$ hexo deploy\n```\n\n详细用法请参考: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hexo-basic","published":1,"updated":"2023-02-07T06:40:34.908Z","layout":"post","photos":[],"link":"","_id":"cldwfwd2x000090v4b2vt2uow","content":"<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"生成一个新的文章\"><a href=\"#生成一个新的文章\" class=\"headerlink\" title=\"生成一个新的文章\"></a>生成一个新的文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>详细用法请参考: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"运行-Hexo-服务\"><a href=\"#运行-Hexo-服务\" class=\"headerlink\" title=\"运行 Hexo 服务\"></a>运行 Hexo 服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>详细用法请参考: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>详细用法请参考: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"部署到远程网站\"><a href=\"#部署到远程网站\" class=\"headerlink\" title=\"部署到远程网站\"></a>部署到远程网站</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>详细用法请参考: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"生成一个新的文章\"><a href=\"#生成一个新的文章\" class=\"headerlink\" title=\"生成一个新的文章\"></a>生成一个新的文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>详细用法请参考: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"运行-Hexo-服务\"><a href=\"#运行-Hexo-服务\" class=\"headerlink\" title=\"运行 Hexo 服务\"></a>运行 Hexo 服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>详细用法请参考: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>详细用法请参考: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"部署到远程网站\"><a href=\"#部署到远程网站\" class=\"headerlink\" title=\"部署到远程网站\"></a>部署到远程网站</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>详细用法请参考: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"hooks 详解","date":"2023-03-03T06:43:30.000Z","_content":"\n## Hooks 的使用\n\n## Hooks 的规则\n\n## 自定义 Hooks\n\n## Hooks 实现\n","source":"_posts/hooks.md","raw":"---\n#layout: page\ntitle: hooks 详解\ndate: 2023-03-03 14:43:30\ntags: [react, framework]\n---\n\n## Hooks 的使用\n\n## Hooks 的规则\n\n## 自定义 Hooks\n\n## Hooks 实现\n","slug":"hooks","published":1,"updated":"2023-06-28T09:32:50.977Z","_id":"cles66ngq0000twv4cg2c0po9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Hooks-的使用\"><a href=\"#Hooks-的使用\" class=\"headerlink\" title=\"Hooks 的使用\"></a>Hooks 的使用</h2><h2 id=\"Hooks-的规则\"><a href=\"#Hooks-的规则\" class=\"headerlink\" title=\"Hooks 的规则\"></a>Hooks 的规则</h2><h2 id=\"自定义-Hooks\"><a href=\"#自定义-Hooks\" class=\"headerlink\" title=\"自定义 Hooks\"></a>自定义 Hooks</h2><h2 id=\"Hooks-实现\"><a href=\"#Hooks-实现\" class=\"headerlink\" title=\"Hooks 实现\"></a>Hooks 实现</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Hooks-的使用\"><a href=\"#Hooks-的使用\" class=\"headerlink\" title=\"Hooks 的使用\"></a>Hooks 的使用</h2><h2 id=\"Hooks-的规则\"><a href=\"#Hooks-的规则\" class=\"headerlink\" title=\"Hooks 的规则\"></a>Hooks 的规则</h2><h2 id=\"自定义-Hooks\"><a href=\"#自定义-Hooks\" class=\"headerlink\" title=\"自定义 Hooks\"></a>自定义 Hooks</h2><h2 id=\"Hooks-实现\"><a href=\"#Hooks-实现\" class=\"headerlink\" title=\"Hooks 实现\"></a>Hooks 实现</h2>"},{"title":"排序与搜索","date":"2023-03-03T07:04:00.000Z","_content":"\n## 排序算法\n\n### 冒泡排序\n\n#### 定义\n\n冒泡排序（Bubble Sort）是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。\n\n![冒泡排序](https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif)\n\n#### 算法步骤\n\n```js\nfunction bubbleSort(array, compareFn = defaultCompare) {\n  const { length } = array;\n  // n个元素只需要进行n - 1轮比较\n  for (let i = 0; i < length - 1; i++) {\n    for (let j = 0; j < length - i - 1; j++) {\n      if (compareFn(array[j], array[j + 1])) {\n        let temp = array[j + 1];\n        array[j + 1] = array[j];\n        array[j] = temp;\n      }\n    }\n  }\n}\n```\n\n### 选择排序\n\n### 插入排序\n\n### 归并排序\n\n### 快速排序\n\n### 计数排序\n\n### 基数排序\n\n## 搜索算法\n\n## 随机算法\n","source":"_posts/sort-search.md","raw":"---\n#layout: page\ntitle: 排序与搜索\ndate: 2023-03-03 15:04:00\ntags: [算法]\n---\n\n## 排序算法\n\n### 冒泡排序\n\n#### 定义\n\n冒泡排序（Bubble Sort）是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。\n\n![冒泡排序](https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif)\n\n#### 算法步骤\n\n```js\nfunction bubbleSort(array, compareFn = defaultCompare) {\n  const { length } = array;\n  // n个元素只需要进行n - 1轮比较\n  for (let i = 0; i < length - 1; i++) {\n    for (let j = 0; j < length - i - 1; j++) {\n      if (compareFn(array[j], array[j + 1])) {\n        let temp = array[j + 1];\n        array[j + 1] = array[j];\n        array[j] = temp;\n      }\n    }\n  }\n}\n```\n\n### 选择排序\n\n### 插入排序\n\n### 归并排序\n\n### 快速排序\n\n### 计数排序\n\n### 基数排序\n\n## 搜索算法\n\n## 随机算法\n","slug":"sort-search","published":1,"updated":"2023-06-28T09:32:50.978Z","_id":"cles6wdws0005twv49k3m3mbt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>冒泡排序（Bubble Sort）是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif\" alt=\"冒泡排序\"></p>\n<h4 id=\"算法步骤\"><a href=\"#算法步骤\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bubbleSort</span>(<span class=\"params\">array, compareFn = defaultCompare</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; length &#125; = array;</span><br><span class=\"line\">  <span class=\"comment\">// n个元素只需要进行n - 1轮比较</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">compareFn</span>(array[j], array[j + <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = array[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">        array[j + <span class=\"number\">1</span>] = array[j];</span><br><span class=\"line\">        array[j] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3><h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><h2 id=\"搜索算法\"><a href=\"#搜索算法\" class=\"headerlink\" title=\"搜索算法\"></a>搜索算法</h2><h2 id=\"随机算法\"><a href=\"#随机算法\" class=\"headerlink\" title=\"随机算法\"></a>随机算法</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>冒泡排序（Bubble Sort）是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif\" alt=\"冒泡排序\"></p>\n<h4 id=\"算法步骤\"><a href=\"#算法步骤\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bubbleSort</span>(<span class=\"params\">array, compareFn = defaultCompare</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; length &#125; = array;</span><br><span class=\"line\">  <span class=\"comment\">// n个元素只需要进行n - 1轮比较</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">compareFn</span>(array[j], array[j + <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = array[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">        array[j + <span class=\"number\">1</span>] = array[j];</span><br><span class=\"line\">        array[j] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3><h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><h2 id=\"搜索算法\"><a href=\"#搜索算法\" class=\"headerlink\" title=\"搜索算法\"></a>搜索算法</h2><h2 id=\"随机算法\"><a href=\"#随机算法\" class=\"headerlink\" title=\"随机算法\"></a>随机算法</h2>"}],"PostAsset":[],"PostCategory":[{"post_id":"cldjvf8a1000e70v467h06sti","category_id":"cldjpx6so000570v42cafaplw","_id":"cldjvf8a6000h70v47wl61xou"},{"post_id":"cldwfwd2x000090v4b2vt2uow","category_id":"cldjn6rjj0005b0v44epg8xbf","_id":"cldwfwd37000490v460yr0atz"}],"PostTag":[{"post_id":"cldjvf8a1000e70v467h06sti","tag_id":"cldjp7hap000270v4b7sl2mc1","_id":"cldjvf8a2000f70v4795w30qa"},{"post_id":"cldjvf8a1000e70v467h06sti","tag_id":"cldjpx6sr000670v4gqjba5ca","_id":"cldjvf8a5000g70v4ehg02psm"},{"post_id":"cldwfwd2x000090v4b2vt2uow","tag_id":"cldjn17v10002b0v4hpgc5ady","_id":"cldwfwd35000290v4fcbwfhxk"},{"post_id":"cles66ngq0000twv4cg2c0po9","tag_id":"cles6apk60001twv4e5k8fnab","_id":"cles6apka0003twv4exhb1rn2"},{"post_id":"cles66ngq0000twv4cg2c0po9","tag_id":"cles6apk90002twv48y0nexmz","_id":"cles6apka0004twv4e9gtbsc3"},{"post_id":"cles6wdws0005twv49k3m3mbt","tag_id":"cles6xbmt0006twv40jzsfm82","_id":"cles6xbmu0007twv4fp6x74lc"}],"Tag":[{"name":"hexo","_id":"cldjn0vze0000b0v49xmw0eh1"},{"name":"文档工具","_id":"cldjn17v10002b0v4hpgc5ady"},{"name":"前端","_id":"cldjp7hap000170v49gco25kg"},{"name":"ES6","_id":"cldjp7hap000270v4b7sl2mc1"},{"name":"Promise","_id":"cldjpx6sr000670v4gqjba5ca"},{"name":"react","_id":"cles6apk60001twv4e5k8fnab"},{"name":"framework","_id":"cles6apk90002twv48y0nexmz"},{"name":"算法","_id":"cles6xbmt0006twv40jzsfm82"}]}}